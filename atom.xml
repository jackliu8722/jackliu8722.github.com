<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[精神兵的 Blog]]></title>
  <link href="http://jackliu8722.github.com/atom.xml" rel="self"/>
  <link href="http://jackliu8722.github.com/"/>
  <updated>2016-06-07T10:32:10+08:00</updated>
  <id>http://jackliu8722.github.com/</id>
  <author>
    <name><![CDATA[jackliu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thrift网络请求包格式详解]]></title>
    <link href="http://jackliu8722.github.com/blog/2016/01/06/thrift-network-package-introduce/"/>
    <updated>2016-01-06T14:54:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2016/01/06/thrift-network-package-introduce</id>
    <content type="html"><![CDATA[<p>写这篇文章的主要原因是近期项目通过Thrift进行通信时，thrift服务端解析客户端发送的数据错误，导致某些请求失败（后面解析其原因）。在查询问题原因的过程中把Thrift发送给服务端的数据包代码阅读了一下，在这里做一下笔记。</p>

<h2>Thrift支持的数据类型</h2>

<p>Thrift客户端与服务端通信时，数据包按照一定的协议进行组织，协议最基本单元就是数据类型，以下是Thrift支持的数据类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">TType</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">STOP</span>   <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">VOID</span>   <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">BOOL</span>   <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">BYTE</span>   <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">DOUBLE</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">I16</span>    <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">I32</span>    <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">I64</span>    <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">STRING</span> <span class="o">=</span> <span class="mi">11</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">STRUCT</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">MAP</span>    <span class="o">=</span> <span class="mi">13</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">SET</span>    <span class="o">=</span> <span class="mi">14</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">LIST</span>   <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">ENUM</span>   <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的TType类来自org.apache.thrift.protocol包，主要定义thrift目前支持的数据类型，在传输时根据应用层定义的消息按类型组织数据包</p>

<h2>消息发送过程</h2>

<p>假设我们定义了一个thrift idl文件，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">com</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">api</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">Api</span><span class="o">{</span>
</span><span class='line'>    <span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="o">,</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">test</span><span class="o">(</span><span class="mi">1</span><span class="o">:</span><span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="o">,</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过thrift生成相应的java文件，当用户调用test方法时，具体的调用流程如下：
Api.Client.test -> Api.Client.send_test ->  TServiceClient.sendBase -> TBase.write
下面具体介绍各方法是怎么把消息组织起来的。</p>

<h4>Api.Client.test</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">test</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">TException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">send_test</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">recv_test</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该接口是应用层客户端调用的，其实它的工作很简单，传递参数并调用send_test进行发送消息，发送完成后接收服务端的响应，这个操作是一个同步操作，这里暂时不做介绍。</p>

<h4>Api.Client.send_test</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">send_test</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">params</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">TException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">test_args</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="n">test_args</span><span class="o">();</span>
</span><span class='line'>  <span class="n">args</span><span class="o">.</span><span class="na">setParams</span><span class="o">(</span><span class="n">params</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sendBase</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>send_test接口的工作其实也很简单，new一个参数类（参数类是thrif根据idl文件生成的），并设置应用层提供的参数，然后调用sendBase方法。</p>

<h4>TServiceClient.sendBase</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">sendBase</span><span class="o">(</span><span class="n">String</span> <span class="n">methodName</span><span class="o">,</span> <span class="n">TBase</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">this</span><span class="o">.</span><span class="na">oprot_</span><span class="o">.</span><span class="na">writeMessageBegin</span><span class="o">(</span><span class="k">new</span> <span class="n">TMessage</span><span class="o">(</span><span class="n">methodName</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="mi">1</span><span class="o">,</span> <span class="o">++</span><span class="k">this</span><span class="o">.</span><span class="na">seqid_</span><span class="o">));</span>
</span><span class='line'>   <span class="n">args</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">oprot_</span><span class="o">);</span>
</span><span class='line'>   <span class="k">this</span><span class="o">.</span><span class="na">oprot_</span><span class="o">.</span><span class="na">writeMessageEnd</span><span class="o">();</span>
</span><span class='line'>   <span class="k">this</span><span class="o">.</span><span class="na">oprot_</span><span class="o">.</span><span class="na">getTransport</span><span class="o">().</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法才是真正的组织消息包了，首先调用oprot_的writeMessageBegin将新建的TMessage对象写入到协议中，TMessage是什么？其实就是对方法名、类型和顺序号进行了封装，没做其它什么工作，具体的类如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">TMessage</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">byte</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">seqid</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">byte</span> <span class="n">t</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">seqid</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;TMessage name:\&#39;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">&quot;\&#39; type: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">+</span> <span class="s">&quot; seqid:&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">seqid</span> <span class="o">+</span> <span class="s">&quot;&gt;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">other</span> <span class="k">instanceof</span> <span class="n">TMessage</span><span class="o">?</span><span class="k">this</span><span class="o">.</span><span class="na">equals</span><span class="o">((</span><span class="n">TMessage</span><span class="o">)</span><span class="n">other</span><span class="o">):</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">TMessage</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">type</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">seqid</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">seqid</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>把方法名等写入到协议后，就需要对方法的参数进行写入，参数的写入由TBase的子类实现（后面会进行分析），参数写入完成后，就完成了对协议的封装，就可以调用传输层进行消息的发送了。</p>

<h4>TBase.write</h4>

<p>TBase.write是一个接口，其具体的实现是由test_args类完成的，其源码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TProtocol</span> <span class="n">oprot</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">TException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">schemes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">oprot</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()).</span><span class="na">getScheme</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">oprot</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>咦，怎么还有一层封装，那我们看看schemes是什么东东。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">IScheme</span><span class="o">&gt;,</span> <span class="n">SchemeFactory</span><span class="o">&gt;</span> <span class="n">schemes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">IScheme</span><span class="o">&gt;,</span> <span class="n">SchemeFactory</span><span class="o">&gt;();</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">schemes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">StandardScheme</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">test_argsStandardSchemeFactory</span><span class="o">());</span>
</span><span class='line'>  <span class="n">schemes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">TupleScheme</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">test_argsTupleSchemeFactory</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来是通过TProtocol的getScheme方法得到具体的scheme类作为Map的key获取SchemeFactory,然后调用相应SchemeFactory的write方法进行对参数的写入。那TProtocol的scheme是什么呢？我们看一下TProtocol的getScheme方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">IScheme</span><span class="o">&gt;</span> <span class="n">getScheme</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">StandardScheme</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来抽象类TProtocol将StandardScheme.class作为默认的scheme类，那就好办了，其实最终调用的是test_argsStandardSchemeFactory类的write方法对参数进行写入。我们再看看test_argsStandardSchemeFactory的write方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TStruct</span> <span class="n">STRUCT_DESC</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TStruct</span><span class="o">(</span><span class="s">&quot;test_args&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TField</span> <span class="n">PARAMS_FIELD_DESC</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TField</span><span class="o">(</span><span class="s">&quot;params&quot;</span><span class="o">,</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TType</span><span class="o">.</span><span class="na">MAP</span><span class="o">,</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TProtocol</span> <span class="n">oprot</span><span class="o">,</span> <span class="n">test_args</span> <span class="n">struct</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">TException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">struct</span><span class="o">.</span><span class="na">validate</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">oprot</span><span class="o">.</span><span class="na">writeStructBegin</span><span class="o">(</span><span class="n">STRUCT_DESC</span><span class="o">);</span><span class="c1">//按照协议要求写入struct描述</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">struct</span><span class="o">.</span><span class="na">params</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">oprot</span><span class="o">.</span><span class="na">writeFieldBegin</span><span class="o">(</span><span class="n">PARAMS_FIELD_DESC</span><span class="o">);</span> <span class="c1">//按照协议要求写入fild描述</span>
</span><span class='line'>     <span class="o">{</span>
</span><span class='line'>          <span class="c1">//写入map对应key和value的类型，以及元素个数</span>
</span><span class='line'>          <span class="n">oprot</span><span class="o">.</span><span class="na">writeMapBegin</span><span class="o">(</span><span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TMap</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">thrift</span><span class="o">.</span><span class="na">protocol</span><span class="o">.</span><span class="na">TType</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="n">struct</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">size</span><span class="o">()));</span>
</span><span class='line'>          <span class="c1">//遍历map，将key和value写入到协议中</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">_iter24</span> <span class="o">:</span> <span class="n">struct</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>          <span class="n">oprot</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">_iter24</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>          <span class="n">oprot</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">_iter24</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>          <span class="n">oprot</span><span class="o">.</span><span class="na">writeMapEnd</span><span class="o">();</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">oprot</span><span class="o">.</span><span class="na">writeFieldEnd</span><span class="o">();</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">oprot</span><span class="o">.</span><span class="na">writeFieldStop</span><span class="o">();</span>
</span><span class='line'>   <span class="n">oprot</span><span class="o">.</span><span class="na">writeStructEnd</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实代码逻辑已经非常清楚了，唯一可能还需要了解的oprot的实现，Thrift默认使用二进制协议TBinaryProtocol类写所有的数据。</p>

<h2>二进制协议类TBinaryProtocol</h2>

<p>二进制协议类TBinaryProtocol作为Thrift默认协议进行读写数据，下面介绍一些主要方法，便于理解协议包的数据组织。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeMessageBegin</span><span class="o">(</span><span class="n">TMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">strictWrite_</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">version</span> <span class="o">=</span> <span class="n">VERSION_1</span> <span class="o">|</span> <span class="n">message</span><span class="o">.</span><span class="na">type</span><span class="o">;</span>
</span><span class='line'>       <span class="n">writeI32</span><span class="o">(</span><span class="n">version</span><span class="o">);</span>
</span><span class='line'>       <span class="n">writeString</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>       <span class="n">writeI32</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">seqid</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">writeString</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>       <span class="n">writeByte</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">type</span><span class="o">);</span>
</span><span class='line'>       <span class="n">writeI32</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">seqid</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeMessageEnd</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法将版本号、方法名和顺序号写入到协议中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeFieldBegin</span><span class="o">(</span><span class="n">TField</span> <span class="n">field</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">writeByte</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">type</span><span class="o">);</span>
</span><span class='line'>    <span class="n">writeI16</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">id</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeFieldEnd</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法将参数类型和id写入到协议中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeMapBegin</span><span class="o">(</span><span class="n">TMap</span> <span class="n">map</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">writeByte</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">keyType</span><span class="o">);</span>
</span><span class='line'>  <span class="n">writeByte</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">valueType</span><span class="o">);</span>
</span><span class='line'>  <span class="n">writeI32</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeMapEnd</span><span class="o">()</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当需要写入map时，将map对应key和value的类型，以及元素个数写入到协议中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">dat</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">writeI32</span><span class="o">(</span><span class="n">dat</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>      <span class="n">trans_</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">dat</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dat</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnsupportedEncodingException</span> <span class="n">uex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">TException</span><span class="o">(</span><span class="s">&quot;JVM DOES NOT SUPPORT UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将string写入到协议中，首先写入string的长度，然后再写入string的字节数组。</p>

<p>其它方法就不在这里一一列出了，大家可以通过看源码进行了解。</p>

<h2>参数Map&lt;String,String>的消息格式</h2>

<p>下面我们以上面idl文件中test方法的参数作为例子，给出具体的协议格式，如下图：</p>

<p><img class="center" src="http://jackliu8722.github.com/images/2016-06/thrift-protocol-format.png"></p>

<h2>开篇中的问题</h2>

<p>在本文开始的时候有提到，我们业务同学在使用thrift进行远程通信时，部分请求在服务端抛出了消息格式解析失败的异常。到底是什么原因呢？容我慢慢道来。我们接口传递的参数类型为Map&lt;String,String>，一般情况是用HashMap来实例化Map，我们知道HashMap的value是可以为NULL的，我们再看看writeString方法；</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">dat</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">writeI32</span><span class="o">(</span><span class="n">dat</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>      <span class="n">trans_</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">dat</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dat</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnsupportedEncodingException</span> <span class="n">uex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">TException</span><span class="o">(</span><span class="s">&quot;JVM DOES NOT SUPPORT UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看到没有，writeString方法没有做NULL判断，那么当我们传递的参数为空时，会向上抛出异常NullPointerException，而在writeString没有进行处理，则会抛向test_argsStandardSchemeFactory的write方法中，而该类也未进行处理，则继续向上抛。通过跟踪源码发现，最终都未对该异常进行处理，那么最后当前客户端只是把部分数据写入到了协议的缓存中，且未调用TProtocol的flush方法进行发送。</p>

<p>当有新的调用时，会继续往该协议中写数据，如果这时Map中不存在为NULL的值，则会写入成功，然后调用flush方法将数据通过网络发送给服务端。这里协议数据包括两部分，第一部分是前一次写失败但有部分写入的数据，第二部分是一个完整的数据。当服务端接收到数据后通过协议进行解析时，是从第一部分开始的，由于数据不完整会造成解析失败，后面部分的数据也不会再进行处理了，这样的话就造成两个请求失败了。</p>

<p>以上就是问题的原因，最终的解决方法很简单，通知业务同学修改代码，对插入map的value进行空处理。更新代码后，此问题不再出现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Innodb源码分析(1)--Mysql环境的搭建]]></title>
    <link href="http://jackliu8722.github.com/blog/2015/11/14/innodb-01-mysql-install/"/>
    <updated>2015-11-14T16:39:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2015/11/14/innodb-01-mysql-install</id>
    <content type="html"><![CDATA[<p>最近一直在研究Innodb的源码，主要的目的为了了解一种存储系统的实现，同时希望在工作当中能够学以致用。Innodb已经成为了Mysql的默认存储引擎，而且市面上各大互联网公司都在使用该存储引擎，因此花点时间研究一下还是非常有必要的。</p>

<p>要想深入的理解Innodb的精髓，在学习的过程中不得不对源码进行修改并编译调试，因此首先就需要编译安装mysql,下面介绍一下mysql编译安装的过程。</p>

<h2>源码下载</h2>

<p>首先从mysql的官网上<a href="http://dev.mysql.com/downloads">http://dev.mysql.com/downloads</a>下载相应版本的源码，本文下载的源码包 mysql-5.6.20.tar.gz</p>

<h2>解压</h2>

<p>假设我们下载好的源码在~/workspace/目录下，执行以下操作将源码解压</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jackliu8722:~<span class="nv">$ </span><span class="nb">cd </span>workspace
</span><span class='line'>jackliu8722:~/workspace<span class="nv">$ </span>tar -zxvf mysql-5.6.20.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h2>编译</h2>

<p>进入mysql源码目录并编译</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jackliu8722:~/workspace<span class="nv">$ </span><span class="nb">cd </span>mysql-5.6.20
</span><span class='line'>jackliu8722:~/workspce/mysql-5.6.20<span class="nv">$ </span>cmake . <span class="se">\</span>
</span><span class='line'>        -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/home/jackliu8722/workspace/mysql-5.6.20-bin <span class="se">\</span>
</span><span class='line'>        -DMYSQL_DATADIR<span class="o">=</span>/home/jackliu8722/workspace/mysql-5.6.20-data <span class="se">\</span>
</span><span class='line'>        -DMYSQL_UNIX_ADDR<span class="o">=</span>/home/jackliu8722/workspace/mysql-5.6.20-bin/mysqld-5.6.20.sock <span class="se">\</span>
</span><span class='line'>        -DWITH_INNOBASE_STORAGE_ENGINE<span class="o">=</span>1 -DWITH_DEBUG<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>上面操作完成之后执行以下操作进行编译安装</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jackliu8722:~/workspace/mysql-5.6.20<span class="nv">$ </span>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>等待一会儿如果没有遇到什么错误，则mysql就编译完成了，并且安装到了/home/jackliu8722/workspace/mysql-5.6.20-bin/ 目录下。如果遇到什么依赖错误，自行安装重试即可，这里就不多介绍了。</p>

<h2>启动mysql服务</h2>

<p>编译安装完成之后，在启动mysql服务之前，需要初始化数据库，按以下操作即可。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jackliu8722:~/workspace/mysql-5.6.20<span class="nv">$ </span><span class="nb">cd</span> ../mysql-5.6.20-bin
</span><span class='line'>jackliu8722:~/workspace/mysql-5.6.20-bin<span class="nv">$ </span>./scripts/mysql_install_db --user<span class="o">=</span>mysql
</span></code></pre></td></tr></table></div></figure>


<p>然后启动mysql服务</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>jackliu8722:~/workspace/mysql-5.6.20-bin<span class="nv">$ </span>support-files/mysql.server start
</span></code></pre></td></tr></table></div></figure>


<p>通过以上几步操作mysql的编译安装就完成了，为以验证是否安装成功，可以通过mysql客户端连接进行验证，如果能够连接成功说明安装已经成功了，就可以进行后续的源码学习了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信红包原理]]></title>
    <link href="http://jackliu8722.github.com/blog/2015/05/04/wei-xin-hong-bao-yuan-li/"/>
    <updated>2015-05-04T22:32:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2015/05/04/wei-xin-hong-bao-yuan-li</id>
    <content type="html"><![CDATA[<h5>注：本文是对微信群@QCon高可用架构群中的热火讨论，再加上微信同学的一些介绍所总结而出的一篇红包原理的文章</h5>

<p>相信大家都玩过微信红包，今天就跟大家分享一下微信红包的原理，仅供参考。</p>

<h3>发红包过程</h3>

<p><img class="center" src="http://jackliu8722.github.com/images/wei-xin-hong-bao-yuan-li/fa-hong-bao.png"></p>

<p>微信发红包的过程如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层将红包信息以红包ID(sendId)为key写入到Cache层，红包记录包括红包个数Count、红包额度Money;</p>

<h4>步骤3：</h4>

<p>业务层将红步骤2中的红包信息同时也写入到db;</p>

<h5>注：步骤2和步骤3可以同时进行，执行完成之后业务层就可以将红包推送给群里用户了</h5>

<h3>点击进入红包过程</h3>

<p><img class="center" src="http://jackliu8722.github.com/images/wei-xin-hong-bao-yuan-li/dian-ji-jin-ru-hong-bao.png"></p>

<p>用户点击进入红包的处理过程如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层根据红包id访问cache；</p>

<h4>步骤3：</h4>

<p>cache层将红包信息返回给业务层；</p>

<h4>步骤4：</h4>

<p>业务层根据红包的剩余个数(Count)决定客户端的最终结果，如果Count>0，表示红包可折，提示用户可以进行折红包，否则提示用户红包已被抢完；</p>

<h3>拆红包过程</h3>

<p><img class="center" src="http://jackliu8722.github.com/images/wei-xin-hong-bao-yuan-li/cai-hong-bao.png"></p>

<p>用户拆红包的过程图如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层根据红包id访问cache；</p>

<h4>步骤3：</h4>

<p>cache层将红包信息返回给业务层，如果红包剩余个数（Count）等于0，说明红包已经被抢完，执行步骤7，直接返回提示用户红包已经被抢完，否则计算红包金额，计算的方式如下：生成从0.01元到剩余平均值2倍之间的一个随机数作为金额（当红包剩余个数为2时，有可能存在超过剩余金额的情况，但只要保证给最后一个红包剩余不少于0.01元的额度即可），最后一个红包直接取剩余额度即可。
步骤4：生成红包额度之后，通过Cache提供的 CAS操作更新红包信息(红包个数减1，剩余总额减去当成红包的额度)。</p>

<h4>步骤5：</h4>

<p>更新Cache之后，更新DB，记录当前被抢了的红包数和金额；</p>

<h4>步骤6：</h4>

<p>如果更新成功返回给业务层，更新失败，业务层可重试；</p>

<h4>步骤7：</h4>

<p>红包剩余个数为0，则返回，提示用户红包已经被抢完，或者更新DB之后，返回用户抢到红包的额度；</p>

<h5>注：有些同学讨论之后总结CAS操作在数据库层去执行，我觉得应该在Cache层更合适，因为Cache容易实现，而且Cache可以专门去做CAS操作，因此个人觉得Cache比较合适。</h5>

<h3>查询红包过程</h3>

<p>查询红包直接读Cache即可，如果红包未抢完，则返回已抢到红包的用户列表，否则返回用户列表的同时，还计算是最佳手气用户，最佳手气的影响因素有两个，一个是红包大小，一个是时间，红包最大者手气最佳，如果存在多个最大者，那就拼时间，最先抢到最大红包的用户手气最佳。</p>

<h5>注：与红包相关的数据量不少，DB存储和Cache都做了Sharding，同时，红包是跟钱相关的，那么存储层的高可靠和高可用性是必须要考虑的一个问题，而且是一个比较大的话题，这里就不做介绍了，有兴趣的同学可以自己思考一下。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra架构与源码分析(一)]]></title>
    <link href="http://jackliu8722.github.com/blog/2014/03/18/cassandra-jia-gou-yu-yuan-ma-fen-xi-01/"/>
    <updated>2014-03-18T23:38:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2014/03/18/cassandra-jia-gou-yu-yuan-ma-fen-xi-01</id>
    <content type="html"><![CDATA[<h3>Cassandra是什么</h3>

<p>随着互联网的蓬勃发展，NoSQL数据库风生水起，涌现出了非常多的非关系数据库，比较火的有MongoDB,HBase，Cassandra等，我们这里主要讲Cassandra，那它是怎么样的一个NoSQL数据库呢？</p>

<p>Cassandra是一套混合型的非关系KV数据库系统，类似于Google的BigTable。大家应该知道Amazon的Dynamo分布式系统吧(不了解的可以google一下)，Cassandra的功能比Dynamo更丰富，但支持度却不如文档存储系统MongoDB。Cassandra最初由Facebook开发，后来转变成了一个开源项目。它是一个网络社交云计算方面理想的数据库。以Amazon专有的完全分布式的Dynamo为基础，并结合了Google的基于列族数据模型的Bigtable，是一个完全P2P去中心化的存储系统。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merkle Tree]]></title>
    <link href="http://jackliu8722.github.com/blog/2014/03/18/merkle-tree/"/>
    <updated>2014-03-18T11:32:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2014/03/18/merkle-tree</id>
    <content type="html"><![CDATA[<h3>什么是Merkle Tree</h3>

<p>Merkle Tree是一种树，并且该树所有节点存储的都是hash值，因此网上大都把Merkle Tree又称为Merkle Hash Tree。Merkle Tree具有以下的特点：</p>

<ol>
<li>Merkle Tree是一种树，并且具有树的所有特点，可以是二叉树也可是多叉树；</li>
<li>Merkle Tree的叶子节点存储的value由设计者指定，可以存储具体的数据，也可以存储数据的hash值；</li>
<li>Merkle Tree非叶子的value存储的其所有子节点的hash值，计算hash值的算法由设计者制定；</li>
</ol>


<p>下图是Merkle Tree的一个例子
<img class="center" src="http://jackliu8722.github.com/images/merkle-tree.png"></p>

<p>根据上图的一棵Merkle Tree，可以得到如下的结果：</p>

<ol>
<li>该Merkle Tree是一棵二叉树；</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper之java实例]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/11/08/zookeeper-java-example/"/>
    <updated>2013-11-08T23:45:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/11/08/zookeeper-java-example</id>
    <content type="html"><![CDATA[<h5>注：本文翻译自zookeeper官方文档，原文请点击<a href="http://zookeeper.apache.org/doc/r3.4.5/javaExample.html">这里</a>。</h5>

<h2>一个简单的Watch客户端</h2>

<p>为了介绍Zookeeper的Java API，我们开发一个非常简单的Watch客户端。该Zookeeper客户观察Zookeeper的节点变化，并通过启动或者终止程序进行响应。</p>

<h4>要求</h4>

<p>该客户端会达到以下4点要求：</p>

<ul>
<li>需要以下参数：Zookeeper服务的地址，被观察节点的名称和和个可执行的对象。</li>
<li>获取与节点相关的数据并启动可行对象。</li>
<li>如果节点发生变化，客户端重新获取节点内容并启动可执行对象。</li>
<li>如果被观察的节点消息，客户端将会终止可招待对象。</li>
</ul>


<h2>程序设计</h2>

<p>按照惯例，Zookeeper应用程序有两部分组成，一部分管理网络连接，另一部分用于监听数据。在这个应用当中，一个称为Executor的类保持与Zookeeper服务器的连接，而监控类DataMonitor监听Zookeeper文件目录树中的数据变化。此外，类Executor包含了主线程和执行逻辑，负责用户与服务器的交互行为，同时根据Zookeeper节点的状态，关闭或者重启可执行对象。</p>

<h4>Executor类</h4>

<p>Executor对象是该示例程序的主容器，它包含Zookeeper对象和DataMonitor对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="c1">//from the Executor class...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;USAGE: Executor hostPort znode filename  paogran [args ...]&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">hostPort</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">znode</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">exec</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">3</span><span class="o">];</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">args</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="n">exec</span><span class="o">,</span><span class="n">exec</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span><span class="o">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">Executor</span><span class="o">(</span><span class="n">hostPort</span><span class="o">,</span><span class="n">znode</span><span class="o">,</span><span class="n">filename</span><span class="o">,</span><span class="n">exec</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Executor</span><span class="o">(</span><span class="n">String</span> <span class="n">hostPort</span><span class="o">,</span><span class="n">String</span> <span class="n">znode</span><span class="o">,</span><span class="n">String</span> <span class="n">filename</span><span class="o">,</span> <span class="n">String</span> <span class="n">exec</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">KeeperException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">filename</span> <span class="o">=</span> <span class="n">filename</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">exec</span> <span class="o">=</span> <span class="n">exec</span><span class="o">;</span>
</span><span class='line'>      <span class="n">zk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ZooKeeper</span><span class="o">(</span><span class="n">hostPort</span><span class="o">,</span><span class="mi">3000</span><span class="o">,</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataMonitor</span><span class="o">(</span><span class="n">zk</span><span class="o">,</span><span class="n">anode</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">try</span><span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">){</span>
</span><span class='line'>              <span class="k">while</span><span class="o">(!</span><span class="n">dm</span><span class="o">.</span><span class="na">dead</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">wait</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回想一下，类Execotur的工作是启动和停止可执行对象，从而响应Zookeeper发送的事件，而该对象的名称是通过命令行传递的参数进行设置的。正如在上面看到的代码中，Executor对象将自身的引用作为ZooKeeper构造函数的参数，代表一个Watcher对象，同时它还通过将自身的引用作为Monitor构造函数的参数，代表DataMonitorListener类的一个对象。每个Executor的定义中，都实现了这丙个接口：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Executor</span> <span class="kd">implements</span> <span class="n">Watcher</span><span class="o">,</span><span class="n">Runnable</span><span class="o">,</span> <span class="n">Monitor</span><span class="o">.</span><span class="na">DataMonitorListener</span><span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>接口Watcher由ZooKeeper的java API定义，ZooKeeper通过该接口将事件传给客户端容器，它只支持一个process方法，它将处理客户端感兴趣的事件，比如ZooKeeper连接的状态或者ZooKeeper会话。在这个例子当中，Executor只是简单的将这些事件下发给DataMonitor对象，由DataMonitor对象决定做什么，这样做的目的仅仅为了方便说明Executor对象或者类Executor这样的对象持有与ZooKeeper的连接，但是它会将事件委派给其它对象进行处理，同时在发起观察事件的处理上选择该方式做为默认的通道（详见后面部分）。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">WatchedEvent</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'>      <span class="n">dm</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一方面，接口DataMonitorListener不是ZooKeeper API的一部分，它完全是为这个示例程序专门自定义的接口，对象DataMonitro使用它与容器通信，也就是Executor对象。DataMonitorListener接口看起来如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DataMonitorListener</span> <span class="o">{</span>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The existence status of the node has changed.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">exists</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[]);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The ZooKeeper session is no longer valid.</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     * @param rc</span>
</span><span class='line'><span class="cm">     * the ZooKeeper reason code</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">closing</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该接口被定义在DataMonitor类中，并且由Executor类实现。当Executor.exists方法被调用时，Executor对象按要求决定是启动还是关闭可执行对象。如果znode节点不存在了，则需要关闭可执行对象。</p>

<p>当Executor.closing方法被调用时，Executor对象决定是否关闭自身以响应ZooKeeper连接的永久消息。</p>

<p>读者可能已经猜到了，为响应ZooKeeper状态变化的事件，DataMonitor是调用这些方法的对象。</p>

<p>类Executor实现DataMonitorListener接口的exists和closing方法的代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exists</span><span class="o">(</span> <span class="kt">byte</span> <span class="o">[]</span> <span class="n">data</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">child</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Killing process&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">child</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>              <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">child</span><span class="o">.</span><span class="na">waitFor</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">child</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Stopping child&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">child</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>              <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">child</span><span class="o">.</span><span class="na">waitFor</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>              <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">filename</span><span class="o">);</span>
</span><span class='line'>              <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>              <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting child&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">child</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">exec</span><span class="o">);</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">StreamWriter</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">StreamWriter</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getErrorStream</span><span class="o">(),</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">closing</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">){</span>
</span><span class='line'>      <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">){</span>
</span><span class='line'>          <span class="n">notifyAll</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>DataMonitor类</h4>

<p>类DataMonitor实现了ZooKeeper逻辑，它大部分是异步的和事件驱动的，其构造函数如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DataMonitor</span><span class="o">(</span><span class="n">ZooKeeper</span> <span class="n">zk</span><span class="o">,</span><span class="n">String</span> <span class="n">anode</span><span class="o">,</span><span class="n">Watcher</span> <span class="n">chainedWatcher</span><span class="o">,</span><span class="n">DataMonitorListener</span> <span class="n">listener</span><span class="o">){</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">zk</span> <span class="o">=</span> <span class="n">zk</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">znode</span> <span class="o">=</span> <span class="n">anode</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">chainedWatcher</span> <span class="o">=</span> <span class="n">chainedWatcher</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">listener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// Get things started by checking if the node exists. We are going</span>
</span><span class='line'>      <span class="c1">// to be completely event driven</span>
</span><span class='line'>      <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过调用ZooKpeeper对象上的exists方法检查anode节点是否存在，并通过对自身的引用(this)设置一个监听对象作为回调函数。当事件被触发，将会进行真正的执行过程。</p>

<h6>注意：不要混淆完成回调与监听回调。完成回调方法ZooKeeper.exists恰好是StatCallbask.processResult方法，并且由类DataMonitor实现。当在ZooKeeper服务器上异步设置监听操作完成之后调用完成回调方法。另一方面，因为Executor已注册为ZooKeeper对象的监听器，因此，通过给Executor发送一个事件以触发监听回调方法。顺便说一句，读者可能会注意到，DataMonitor对象也可以将自身注册为事件监听器，这是ZooKeeper 3.3.0的新特性（支持多外监听器）。然后，在这个例子中，DataMonitor并没有注册为监听器。</h6>

<p>当服务器完成ZooKeeper.esists操作之后，ZooKeeper API将调用客户端的完成回调函数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="n">Object</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">Stat</span> <span class="n">stat</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">esists</span><span class="o">;</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="n">tr</span><span class="o">){</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">Ok</span><span class="o">:</span>
</span><span class='line'>          <span class="n">exists</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">NoNode</span><span class="o">:</span>
</span><span class='line'>          <span class="n">exists</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">SessionExpired</span><span class="o">:</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">NoAuth</span><span class="o">:</span>
</span><span class='line'>          <span class="n">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>          <span class="n">listener</span><span class="o">.</span><span class="na">closing</span><span class="o">(</span><span class="n">rc</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">anode</span><span class="o">,</span><span class="kc">true</span><span class="o">,</span><span class="k">this</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">exists</span><span class="o">){</span>
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>              <span class="n">b</span> <span class="o">=</span> <span class="n">zk</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">KeeperException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="c1">// We don&#39;t need to worry about recovering now. The watch</span>
</span><span class='line'>              <span class="c1">// callbacks will kick off any exception handling</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">interruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="k">return</span> <span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span><span class="o">((</span><span class="n">b</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="n">prevData</span><span class="o">]])</span> <span class="o">||</span> <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">prevData</span><span class="o">,</span><span class="n">b</span><span class="o">))){</span>
</span><span class='line'>          <span class="n">listener</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>          <span class="n">prevData</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该代码首先通过返回的状态代码检查节点是否存在、是否发生致命错误或者可恢复的错误。如果节点存在，则从节点上获取数据，并且如果节点的状态发生变化，将调用Executor对象的回调函数exists。注意，在调用方法getData时，不做任何异常处理，因为它有处理错误的监听器。如果在调用ZooKeeper.getData方法之前删除了节点，监听事件将触发一个回调。如果遇到了一个传输错误，当连接传回时将触发一个监听事件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">WatchedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getType</span><span class="o">()</span> <span class="o">==</span> <span class="n">Event</span><span class="o">.</span><span class="na">EventType</span><span class="o">.</span><span class="na">None</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// We are are being told that the state of the</span>
</span><span class='line'>            <span class="c1">// connection has changed</span>
</span><span class='line'>            <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getState</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">SyncConnected:</span>
</span><span class='line'>                <span class="c1">// In this particular example we don&#39;t need to do anything</span>
</span><span class='line'>                <span class="c1">// here - watches are automatically re-registered with </span>
</span><span class='line'>                <span class="c1">// server and any watches triggered while the client was </span>
</span><span class='line'>                <span class="c1">// disconnected will be delivered (in order of course)</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">Expired:</span>
</span><span class='line'>                <span class="c1">// It&#39;s all over</span>
</span><span class='line'>                <span class="n">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="n">listener</span><span class="o">.</span><span class="na">closing</span><span class="o">(</span><span class="n">KeeperException</span><span class="o">.</span><span class="na">Code</span><span class="o">.</span><span class="na">SessionExpired</span><span class="o">);</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">path</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">znode</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Something has changed on the node, let&#39;s find out</span>
</span><span class='line'>                <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">chainedWatcher</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">chainedWatcher</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果客户端库在会话过期（超时事件）之前与ZooKeeper服务器重新建立了通信通道(SyncConnected事件)，则所有的会话事件将自动地与服务器重建连接（自动复位是ZooKeeper 3.0.0的特性）。更多关于监听的介绍可以ZooKeeper的编程指南中找到。在这个函数的后面部分中，当DataMonitor收到一个节点事件时，将会调用ZooKeeper的exists函数，以处理变化。</p>

<h4>所有的源码</h4>

<figure class='code'><figcaption><span>Executor.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * A simple example program to use DataMonitor to start and</span>
</span><span class='line'><span class="cm">     * stop executables based on a znode. The program watches the</span>
</span><span class='line'><span class="cm">     * specified znode and saves the data that corresponds to the</span>
</span><span class='line'><span class="cm">     * znode in the filesystem. It also starts the specified program</span>
</span><span class='line'><span class="cm">     * with the specified arguments when the znode exists and kills</span>
</span><span class='line'><span class="cm">     * the program if the znode goes away.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.KeeperException</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.WatchedEvent</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.Watcher</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.ZooKeeper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Executor</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">Watcher</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">,</span> <span class="n">DataMonitor</span><span class="o">.</span><span class="na">DataMonitorListener</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">znode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">DataMonitor</span> <span class="n">dm</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ZooKeeper</span> <span class="n">zk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">String</span> <span class="n">filename</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">String</span> <span class="n">exec</span><span class="o">[];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Process</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">Executor</span><span class="o">(</span><span class="n">String</span> <span class="n">hostPort</span><span class="o">,</span> <span class="n">String</span> <span class="n">znode</span><span class="o">,</span> <span class="n">String</span> <span class="n">filename</span><span class="o">,</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">exec</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">KeeperException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">filename</span> <span class="o">=</span> <span class="n">filename</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">exec</span> <span class="o">=</span> <span class="n">exec</span><span class="o">;</span>
</span><span class='line'>          <span class="n">zk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ZooKeeper</span><span class="o">(</span><span class="n">hostPort</span><span class="o">,</span> <span class="mi">3000</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="n">dm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataMonitor</span><span class="o">(</span><span class="n">zk</span><span class="o">,</span> <span class="n">znode</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">      * @param args</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;USAGE: Executor hostPort znode filename program  [args ...]&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">hostPort</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">znode</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">exec</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">3</span><span class="o">];</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">args</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="n">exec</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">exec</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Executor</span><span class="o">(</span><span class="n">hostPort</span><span class="o">,</span> <span class="n">znode</span><span class="o">,</span> <span class="n">filename</span><span class="o">,</span> <span class="n">exec</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/***************************************************************************</span>
</span><span class='line'><span class="cm">         * We do process any events ourselves, we just need to forward them on.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * @see  org.apache.zookeeper.Watcher#process(org.apache.zookeeper.proto.WatcherEvent)</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">WatchedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">dm</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">while</span> <span class="o">(!</span><span class="n">dm</span><span class="o">.</span><span class="na">dead</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">wait</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">closing</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">notifyAll</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">static</span> <span class="kd">class</span> <span class="nc">StreamWriter</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">OutputStream</span> <span class="n">os</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">InputStream</span> <span class="n">is</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">StreamWriter</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">is</span><span class="o">,</span> <span class="n">OutputStream</span> <span class="n">os</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">is</span> <span class="o">=</span> <span class="n">is</span><span class="o">;</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">os</span> <span class="o">=</span> <span class="n">os</span><span class="o">;</span>
</span><span class='line'>              <span class="n">start</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">80</span><span class="o">];</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">rc</span><span class="o">;</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">while</span> <span class="o">((</span><span class="n">rc</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">b</span><span class="o">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">rc</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exists</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Killing process&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">child</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>                  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">child</span><span class="o">.</span><span class="na">waitFor</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">child</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Stopping child&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">child</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>                  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">child</span><span class="o">.</span><span class="na">waitFor</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">filename</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Starting child&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">child</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">exec</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">StreamWriter</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">StreamWriter</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getErrorStream</span><span class="o">(),</span> <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DataMonitor.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * A simple class that monitors the data and existence of a ZooKeeper</span>
</span><span class='line'><span class="cm">     * node. It uses asynchronous ZooKeeper APIs.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.KeeperException</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.WatchedEvent</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.Watcher</span><span class="o">;</span> 
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.ZooKeeper</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.AsyncCallback.StatCallback</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.KeeperException.Code</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">org.apache.zookeeper.data.Stat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataMonitor</span> <span class="kd">implements</span> <span class="n">Watcher</span><span class="o">,</span> <span class="n">StatCallback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ZooKeeper</span> <span class="n">zk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">String</span> <span class="n">znode</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Watcher</span> <span class="n">chainedWatcher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">dead</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">DataMonitorListener</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">byte</span> <span class="n">prevData</span><span class="o">[];</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">DataMonitor</span><span class="o">(</span><span class="n">ZooKeeper</span> <span class="n">zk</span><span class="o">,</span> <span class="n">String</span> <span class="n">znode</span><span class="o">,</span> <span class="n">Watcher</span> <span class="n">chainedWatcher</span><span class="o">,</span>
</span><span class='line'>            <span class="n">DataMonitorListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">zk</span> <span class="o">=</span> <span class="n">zk</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">znode</span> <span class="o">=</span> <span class="n">znode</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">chainedWatcher</span> <span class="o">=</span> <span class="n">chainedWatcher</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">listener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'>          <span class="c1">// Get things started by checking if the node exists. We are going</span>
</span><span class='line'>          <span class="c1">// to be completely event driven</span>
</span><span class='line'>          <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Other classes use the DataMonitor by implementing this method</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DataMonitorListener</span> <span class="o">{</span>
</span><span class='line'>          <span class="cm">/**</span>
</span><span class='line'><span class="cm">             * The existence status of the node has changed.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>          <span class="kt">void</span> <span class="nf">exists</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[]);</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/**</span>
</span><span class='line'><span class="cm">             * The ZooKeeper session is no longer valid.</span>
</span><span class='line'><span class="cm">             *</span>
</span><span class='line'><span class="cm">             * @param rc</span>
</span><span class='line'><span class="cm">             *                the ZooKeeper reason code</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>          <span class="kt">void</span> <span class="nf">closing</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">WatchedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getType</span><span class="o">()</span> <span class="o">==</span> <span class="n">Event</span><span class="o">.</span><span class="na">EventType</span><span class="o">.</span><span class="na">None</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// We are are being told that the state of the</span>
</span><span class='line'>              <span class="c1">// connection has changed</span>
</span><span class='line'>              <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getState</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="nl">SyncConnected:</span>
</span><span class='line'>                  <span class="c1">// In this particular example we don&#39;t need to do anything</span>
</span><span class='line'>                  <span class="c1">// here - watches are automatically re-registered with </span>
</span><span class='line'>                  <span class="c1">// server and any watches triggered while the client was </span>
</span><span class='line'>                  <span class="c1">// disconnected will be delivered (in order of course)</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="k">case</span> <span class="nl">Expired:</span>
</span><span class='line'>                  <span class="c1">// It&#39;s all over</span>
</span><span class='line'>                  <span class="n">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                  <span class="n">listener</span><span class="o">.</span><span class="na">closing</span><span class="o">(</span><span class="n">KeeperException</span><span class="o">.</span><span class="na">Code</span><span class="o">.</span><span class="na">SessionExpired</span><span class="o">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">path</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">znode</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">// Something has changed on the node, let&#39;s find out</span>
</span><span class='line'>                  <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">chainedWatcher</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">chainedWatcher</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">rc</span><span class="o">,</span> <span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="n">Object</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">Stat</span> <span class="n">stat</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">boolean</span> <span class="n">exists</span><span class="o">;</span>
</span><span class='line'>          <span class="k">switch</span> <span class="o">(</span><span class="n">rc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">Ok</span><span class="o">:</span>
</span><span class='line'>              <span class="n">exists</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">NoNode</span><span class="o">:</span>
</span><span class='line'>              <span class="n">exists</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">SessionExpired</span><span class="o">:</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">Code</span><span class="o">.</span><span class="na">NoAuth</span><span class="o">:</span>
</span><span class='line'>              <span class="n">dead</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="n">listener</span><span class="o">.</span><span class="na">closing</span><span class="o">(</span><span class="n">rc</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="c1">// Retry errors</span>
</span><span class='line'>              <span class="n">zk</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">byte</span> <span class="n">b</span><span class="o">[]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">exists</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">b</span> <span class="o">=</span> <span class="n">zk</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">znode</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">KeeperException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="c1">// We don&#39;t need to worry about recovering now. The watch</span>
</span><span class='line'>                  <span class="c1">// callbacks will kick off any exception handling</span>
</span><span class='line'>                  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">return</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span><span class="n">b</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="n">prevData</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">||</span> <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">prevData</span><span class="o">,</span> <span class="n">b</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">listener</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>              <span class="n">prevData</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux源码分析之进程表示]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/11/07/linux-kernel-001/"/>
    <updated>2013-11-07T08:43:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/11/07/linux-kernel-001</id>
    <content type="html"><![CDATA[<p>linux进程的概念在这里就不介绍，网上可以找到非常多的资料进行学习，这里主要介绍在linux系统中，进程是如何表示的，作为学习后个笔记。</p>

<p>Linux内核涉及进程和程序的所有算法都围绕一个名为task_struct的数据结构建立，该结构定义在内核源码的include/sched.h文件中。task_struct是一个结构体，包含非常多的成员，其完整结构体如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">struct</span> <span class="n">task_struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">volatile</span> <span class="kt">long</span> <span class="n">state</span><span class="p">;</span>   <span class="cm">/* 进程状态：-1 表示不可运行, 0 表示可运行, &gt;0 表示停止 */</span>
</span><span class='line'>      <span class="kt">void</span> <span class="o">*</span><span class="n">stack</span><span class="p">;</span>  <span class="cm">/* 进程内核栈*/</span>
</span><span class='line'>      <span class="n">atomic_t</span> <span class="n">usage</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* </span>
</span><span class='line'><span class="cm">       每个进程当前的状态标志：</span>
</span><span class='line'><span class="cm">       0x00000002 表示进程正在在被创建</span>
</span><span class='line'><span class="cm">       0x00000004 表示进程正准备退出</span>
</span><span class='line'><span class="cm">       0x00000040 表示此进程被fork系统调用创建，但并没有执行exec</span>
</span><span class='line'><span class="cm">       0x00000400 表示此进程由于其它进行发送相关信号矶被杀死 </span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>   
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ptrace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">lock_depth</span><span class="p">;</span>       <span class="cm">/* 大内核锁深度 */</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_SMP</span>
</span><span class='line'>      <span class="cp">#ifdef __ARCH_WANT_UNLOCKED_CTXSW</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">oncpu</span><span class="p">;</span>  <span class="cm">/* 指示进程运行的CPU */</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cm">/* </span>
</span><span class='line'><span class="cm">          * static_prio是表态优先级，也就是进程启动时分配的优先级</span>
</span><span class='line'><span class="cm">          * prio,normal_prio是动态优先级 </span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">prio</span><span class="p">,</span> <span class="n">static_prio</span><span class="p">,</span> <span class="n">normal_prio</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* run_list是一个表头，用于维护包含各进程的一个运行表*/</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">run_list</span><span class="p">;</span>
</span><span class='line'>      <span class="k">const</span> <span class="k">struct</span> <span class="n">sched_class</span> <span class="o">*</span><span class="n">sched_class</span><span class="p">;</span> <span class="cm">/*表示该进程所属的调用器类*/</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sched_entity</span> <span class="n">se</span><span class="p">;</span> <span class="cm">/* 调度实体*/</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_PREEMPT_NOTIFIERS</span>
</span><span class='line'>      <span class="cm">/* 结构体preempt_notifier链表，与抢占有关*/</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">hlist_head</span> <span class="n">preempt_notifiers</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">ioprio</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     fpu_counter 包含了浮点运算单元用到的上下文切换</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">fpu_counter</span><span class="p">;</span>
</span><span class='line'>      <span class="n">s8</span> <span class="n">oomkilladj</span><span class="p">;</span> <span class="cm">/* OOM kill score adjustment (bit shift). */</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_BLK_DEV_IO_TRACE</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">btrace_seq</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * policy保存了对该进程应用的调度策略，有5个可能的值</span>
</span><span class='line'><span class="cm">      * SCHED_NORMAL 用于普通进程，通过完全公平调度器来处理。</span>
</span><span class='line'><span class="cm">      * SCHED_BATCH和SCHED_IDLE 也通过完全公平调度器来处理，不过用于次要的进程。</span>
</span><span class='line'><span class="cm">      * SCHED_BATCH用于交互，CPU使用密集的批处理进程。</span>
</span><span class='line'><span class="cm">      * SCHED_RR和SCHED_FIFO用于实现软实时进程，SCHED_RR实现了一种循环方法，而SCHED_FIFO则使用先进先出机制。</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">policy</span><span class="p">;</span>  <span class="cm">/* 高度策略 */</span>
</span><span class='line'>      <span class="cm">/*cpus_allowed是一个位域，在多处理品系统上使用，用来限制进程可以在哪些CPU上运行*/</span>
</span><span class='line'>      <span class="n">cpumask_t</span> <span class="n">cpus_allowed</span><span class="p">;</span> <span class="cm">/* 多核体系结构中管理CPU的位图*/</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">time_slice</span><span class="p">;</span> <span class="cm">/*指定进程可使用CPU的剩余时间段*/</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sched_info</span> <span class="n">sched_info</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">tasks</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * ptrace_list/ptrace_children forms the list of my children</span>
</span><span class='line'><span class="cm">     * that were stolen by a ptracer.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">ptrace_children</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">ptrace_list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">mm_struct</span> <span class="o">*</span><span class="n">mm</span><span class="p">,</span> <span class="o">*</span><span class="n">active_mm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* task state */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">linux_binfmt</span> <span class="o">*</span><span class="n">binfmt</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">exit_state</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">exit_signal</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">pdeath_signal</span><span class="p">;</span>  <span class="cm">/*  The signal sent when the parent dies  */</span>
</span><span class='line'>      <span class="cm">/* ??? */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">personality</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="n">did_exec</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span> <span class="cm">/* 全局进程ID*/</span>
</span><span class='line'>      <span class="n">pid_t</span> <span class="n">tgid</span><span class="p">;</span> <span class="cm">/* 局部进程ID*/</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_CC_STACKPROTECTOR</span>
</span><span class='line'>      <span class="cm">/* Canary value for the -fstack-protector gcc feature */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">stack_canary</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cm">/* </span>
</span><span class='line'><span class="cm">     * pointers to (original) parent process, youngest child, younger sibling,</span>
</span><span class='line'><span class="cm">     * older sibling, respectively.  (p-&gt;father can be replaced with </span>
</span><span class='line'><span class="cm">     * p-&gt;parent-&gt;pid)</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">real_parent</span><span class="p">;</span> <span class="cm">/* real parent process (when being debugged) */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>  <span class="cm">/* parent process */</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * children/sibling forms the list of my children plus the</span>
</span><span class='line'><span class="cm">     * tasks I&#39;m ptracing.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">children</span><span class="p">;</span>  <span class="cm">/* list of my children */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">sibling</span><span class="p">;</span>   <span class="cm">/* linkage in my parent&#39;s children list */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">group_leader</span><span class="p">;</span>    <span class="cm">/* threadgroup leader */</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* PID/PID hash table linkage. */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">pid_link</span> <span class="n">pids</span><span class="p">[</span><span class="n">PIDTYPE_MAX</span><span class="p">];</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">thread_group</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">completion</span> <span class="o">*</span><span class="n">vfork_done</span><span class="p">;</span>       <span class="cm">/* for vfork() */</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">__user</span> <span class="o">*</span><span class="n">set_child_tid</span><span class="p">;</span>      <span class="cm">/* CLONE_CHILD_SETTID */</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">__user</span> <span class="o">*</span><span class="n">clear_child_tid</span><span class="p">;</span>        <span class="cm">/* CLONE_CHILD_CLEARTID */</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      *表示实时进程的优先级，最低的实时优先级为0，最高的优先级是99。值越大，表明优先级越高，不同于nice值</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">rt_priority</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cputime_t</span> <span class="n">utime</span><span class="p">,</span> <span class="n">stime</span><span class="p">,</span> <span class="n">utimescaled</span><span class="p">,</span> <span class="n">stimescaled</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cputime_t</span> <span class="n">gtime</span><span class="p">;</span>
</span><span class='line'>      <span class="n">cputime_t</span> <span class="n">prev_utime</span><span class="p">,</span> <span class="n">prev_stime</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nvcsw</span><span class="p">,</span> <span class="n">nivcsw</span><span class="p">;</span> <span class="cm">/* context switch counts */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">timespec</span> <span class="n">start_time</span><span class="p">;</span>         <span class="cm">/* monotonic time */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">timespec</span> <span class="n">real_start_time</span><span class="p">;</span>    <span class="cm">/* boot based time */</span>
</span><span class='line'>      <span class="cm">/* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">min_flt</span><span class="p">,</span> <span class="n">maj_flt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">cputime_t</span> <span class="n">it_prof_expires</span><span class="p">,</span> <span class="n">it_virt_expires</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">it_sched_expires</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">cpu_timers</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* process credentials */</span>
</span><span class='line'>      <span class="n">uid_t</span> <span class="n">uid</span><span class="p">,</span><span class="n">euid</span><span class="p">,</span><span class="n">suid</span><span class="p">,</span><span class="n">fsuid</span><span class="p">;</span>
</span><span class='line'>      <span class="n">gid_t</span> <span class="n">gid</span><span class="p">,</span><span class="n">egid</span><span class="p">,</span><span class="n">sgid</span><span class="p">,</span><span class="n">fsgid</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">group_info</span> <span class="o">*</span><span class="n">group_info</span><span class="p">;</span>
</span><span class='line'>      <span class="n">kernel_cap_t</span>   <span class="n">cap_effective</span><span class="p">,</span> <span class="n">cap_inheritable</span><span class="p">,</span> <span class="n">cap_permitted</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="n">keep_capabilities</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">user_struct</span> <span class="o">*</span><span class="n">user</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_KEYS</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">key</span> <span class="o">*</span><span class="n">request_key_auth</span><span class="p">;</span>    <span class="cm">/* assumed request_key authority */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">key</span> <span class="o">*</span><span class="n">thread_keyring</span><span class="p">;</span>  <span class="cm">/* keyring private to this thread */</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">jit_keyring</span><span class="p">;</span>    <span class="cm">/* default keyring to attach requested keys to */</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">comm</span><span class="p">[</span><span class="n">TASK_COMM_LEN</span><span class="p">];</span> <span class="cm">/* executable name excluding path</span>
</span><span class='line'><span class="cm">                  - access with [gs]et_task_comm (which lock</span>
</span><span class='line'><span class="cm">                    it with task_lock())</span>
</span><span class='line'><span class="cm">                  - initialized normally by flush_old_exec */</span>
</span><span class='line'>      <span class="cm">/* file system info */</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">link_count</span><span class="p">,</span> <span class="n">total_link_count</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_SYSVIPC</span>
</span><span class='line'>      <span class="cm">/* ipc stuff */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sysv_sem</span> <span class="n">sysvsem</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cm">/* CPU-specific state of this task */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">thread_struct</span> <span class="kr">thread</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* filesystem information */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">fs_struct</span> <span class="o">*</span><span class="n">fs</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* open file information */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">files_struct</span> <span class="o">*</span><span class="n">files</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* namespaces */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">nsproxy</span> <span class="o">*</span><span class="n">nsproxy</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* signal handlers */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">signal_struct</span> <span class="o">*</span><span class="n">signal</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sighand_struct</span> <span class="o">*</span><span class="n">sighand</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">sigset_t</span> <span class="n">blocked</span><span class="p">,</span> <span class="n">real_blocked</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sigset_t</span> <span class="n">saved_sigmask</span><span class="p">;</span>        <span class="cm">/* To be restored with TIF_RESTORE_SIGMASK */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">sigpending</span> <span class="n">pending</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">sas_ss_sp</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">size_t</span> <span class="n">sas_ss_size</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">notifier</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">priv</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">void</span> <span class="o">*</span><span class="n">notifier_data</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sigset_t</span> <span class="o">*</span><span class="n">notifier_mask</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_SECURITY</span>
</span><span class='line'>      <span class="kt">void</span> <span class="o">*</span><span class="n">security</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">audit_context</span> <span class="o">*</span><span class="n">audit_context</span><span class="p">;</span>
</span><span class='line'>      <span class="n">seccomp_t</span> <span class="n">seccomp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Thread group tracking */</span>
</span><span class='line'>          <span class="n">u32</span> <span class="n">parent_exec_id</span><span class="p">;</span>
</span><span class='line'>          <span class="n">u32</span> <span class="n">self_exec_id</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* Protection of (de-)allocation: mm, files, fs, tty, keyrings */</span>
</span><span class='line'>      <span class="n">spinlock_t</span> <span class="n">alloc_lock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Protection of the PI data structures: */</span>
</span><span class='line'>      <span class="n">spinlock_t</span> <span class="n">pi_lock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_RT_MUTEXES</span>
</span><span class='line'>      <span class="cm">/* PI waiters blocked on a rt_mutex held by this task */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">plist_head</span> <span class="n">pi_waiters</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* Deadlock detection and priority inheritance handling */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">rt_mutex_waiter</span> <span class="o">*</span><span class="n">pi_blocked_on</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_DEBUG_MUTEXES</span>
</span><span class='line'>      <span class="cm">/* mutex deadlock detection */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">mutex_waiter</span> <span class="o">*</span><span class="n">blocked_on</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_TRACE_IRQFLAGS</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">irq_events</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">hardirqs_enabled</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">hardirq_enable_ip</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hardirq_enable_event</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">hardirq_disable_ip</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">hardirq_disable_event</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">softirqs_enabled</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">softirq_disable_ip</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">softirq_disable_event</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">softirq_enable_ip</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">softirq_enable_event</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">hardirq_context</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">softirq_context</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_LOCKDEP</span>
</span><span class='line'>      <span class="cp"># define MAX_LOCK_DEPTH 30UL</span>
</span><span class='line'>      <span class="n">u64</span> <span class="n">curr_chain_key</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">lockdep_depth</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">held_lock</span> <span class="n">held_locks</span><span class="p">[</span><span class="n">MAX_LOCK_DEPTH</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">lockdep_recursion</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* journalling filesystem info */</span>
</span><span class='line'>      <span class="kt">void</span> <span class="o">*</span><span class="n">journal_info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* stacked block device info */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">bio</span> <span class="o">*</span><span class="n">bio_list</span><span class="p">,</span> <span class="o">**</span><span class="n">bio_tail</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* VM state */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">reclaim_state</span> <span class="o">*</span><span class="n">reclaim_state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">backing_dev_info</span> <span class="o">*</span><span class="n">backing_dev_info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">struct</span> <span class="n">io_context</span> <span class="o">*</span><span class="n">io_context</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">ptrace_message</span><span class="p">;</span>
</span><span class='line'>      <span class="n">siginfo_t</span> <span class="o">*</span><span class="n">last_siginfo</span><span class="p">;</span> <span class="cm">/* For ptrace use.  */</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_TASK_XACCT</span>
</span><span class='line'>      <span class="cm">/* i/o counters(bytes read/written, #syscalls */</span>
</span><span class='line'>      <span class="n">u64</span> <span class="n">rchar</span><span class="p">,</span> <span class="n">wchar</span><span class="p">,</span> <span class="n">syscr</span><span class="p">,</span> <span class="n">syscw</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">task_io_accounting</span> <span class="n">ioac</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#if defined(CONFIG_TASK_XACCT)</span>
</span><span class='line'>      <span class="n">u64</span> <span class="n">acct_rss_mem1</span><span class="p">;</span> <span class="cm">/* accumulated rss usage */</span>
</span><span class='line'>      <span class="n">u64</span> <span class="n">acct_vm_mem1</span><span class="p">;</span>  <span class="cm">/* accumulated virtual memory usage */</span>
</span><span class='line'>      <span class="n">cputime_t</span> <span class="n">acct_stimexpd</span><span class="p">;</span><span class="cm">/* stime since last update */</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_NUMA</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">mempolicy</span> <span class="o">*</span><span class="n">mempolicy</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">short</span> <span class="n">il_next</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_CPUSETS</span>
</span><span class='line'>      <span class="n">nodemask_t</span> <span class="n">mems_allowed</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">cpuset_mems_generation</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">cpuset_mem_spread_rotor</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_CGROUPS</span>
</span><span class='line'>      <span class="cm">/* Control Group info protected by css_set_lock */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">css_set</span> <span class="o">*</span><span class="n">cgroups</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* cg_list protected by css_set_lock and tsk-&gt;alloc_lock */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">cg_list</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_FUTEX</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">robust_list_head</span> <span class="n">__user</span> <span class="o">*</span><span class="n">robust_list</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_COMPAT</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">compat_robust_list_head</span> <span class="n">__user</span> <span class="o">*</span><span class="n">compat_robust_list</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">list_head</span> <span class="n">pi_state_list</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">futex_pi_state</span> <span class="o">*</span><span class="n">pi_state_cache</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="n">atomic_t</span> <span class="n">fs_excl</span><span class="p">;</span>  <span class="cm">/* holding fs exclusive resources */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">rcu_head</span> <span class="n">rcu</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * cache last used pipe for splice</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">pipe_inode_info</span> <span class="o">*</span><span class="n">splice_pipe</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_TASK_DELAY_ACCT</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">task_delay_info</span> <span class="o">*</span><span class="n">delays</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="cp">#ifdef CONFIG_FAULT_INJECTION</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">make_it_fail</span><span class="p">;</span>
</span><span class='line'>      <span class="cp">#endif</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">prop_local_single</span> <span class="n">dirties</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zookeeper源码分析(三)——类QuorumPeer的分析]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/29/zookeeper-yuan-ma-fen-xi-03-lei-quorumpeer-fen-xi/"/>
    <updated>2013-10-29T23:12:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/29/zookeeper-yuan-ma-fen-xi-03-lei-quorumpeer-fen-xi</id>
    <content type="html"><![CDATA[<p>在Zookeeper中，类QuoromPeer处在非常重要的地位，它管理了quorum协议，并且包含以下三种状态：</p>

<ol>
<li>Leader选择：每个server都将选出一个leader（最初建议server自己为leader）。</li>
<li>Follower：处于该状态的server将与leader进行同步，并且复制任务事务。</li>
<li>Leader：处于leader状态的server处理请求，并转发给Follower。大部分Follower在接受请求之前必须将请求输出到日志中。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用urllib2获取网络资源]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/26/urllib2-with-python/"/>
    <updated>2013-10-26T17:00:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/26/urllib2-with-python</id>
    <content type="html"><![CDATA[<p></br>
<b>注意</b>:本文翻译自Python官方文档，Python的版本为3.3.2</p>

<h3>1 简介</h3>

<p>urllib.request是Python的一个模块，它可以通过URL（统一资源定位）获取网络上的信息。该模块提供了一个非常简单的接口函数urlopen,能够使用不同的协议获取URL指定的资源。它还提供了一个稍微复杂的接口处理常见的情况，比如基本的身份验证、cookies、代理等等。</p>

<p>urllib通过相关的网络协议（例如，FTP,HTTP）可以支持许多URL schemes（由URL字符串中的&#8221;:&#8221;符号之前的字符串标识，例如，ftp是URL&#8221;ftp://python.org/&#8221;的schemes）.本教程重点介绍最常用的协议——HTTP。</p>

<p>对于简单的应用中，urlopen的使用是非常简单的，但是，当你打开HTTP协议的网址时，只要遇到一些错误或者不可处理的情况，就需要对HTTP协议有一定的理解。HTTP最全面最权威的参考文档是RFC 2616，这是一个技术文档，而且不易于阅读。此处的使用文档的目的是介绍urlib的使用，关于HTTP更多的细节可以参考RFC 2616文档，它的作用不是取代urllib.request文档，而是作为urllib.request的一个补充知识。</p>

<h3>2 获取网络资源</h3>

<p>使用urllib.request的最简单的方法如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   
</span><span class='line'>  <span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">url</span> <span class="n">lib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://python.org/&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想通过URL检索资源，并将结果存储在一个临时位置，可以通过urlretrieve函数到达要求。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   
</span><span class='line'>  <span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>  <span class="n">local_filename</span><span class="p">,</span><span class="n">headers</span> <span class="o">=</span> <span class="n">url</span> <span class="n">lib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="s">&#39;http://python.org/&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">local_filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>urllib的使用就如以上的方法那样简单（注意，除了使用http,我们也可以使用ftp协议，file等等。），然而本教程的目的是介绍更复杂的HTTP协议。</p>

<p>HTTP协议包括请求和响应，客户端发出请求，而服务器响应请求。urllib.request代表了HTTP的请求对象，表示我们创建的服务请求。在最简单的形式中，首先创建一个Request对象，指定需要获取资源的URL，然后调用urlopen返回一个针对请求的响应对象，这处响应对象类似文件对象，也就是说，可以调用read函数获取响应的内容。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   
</span><span class='line'>  <span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>  <span class="n">req</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="s">&#39;http://www.voidspace.org.uk&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urllopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="n">the_page</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，urllib.request使用相同的请求接口来处理所有的URL方案。例如，可以使用以下的方式使用FTP请求：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   
</span><span class='line'>  <span class="n">req</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="s">&#39;ftp://example.com/&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在处理HTTP的情况下，请求对象允许你可以做额外的两件事：首先，可以将数据发送给服务器。其次你可以将与数据有关的其它信息（元数据）或者请求自身发送给服务器，这些信息通过设置HTTP头进行传输。让我们依次介绍这些内容。</p>

<h4>2.1 数据</h4>

<p>有时我们想向一个URL指定的地址发送数据（通常URL地址涉及一个CGI(公共网关接口)脚本或者其它的web应用程序）。在HTTP协议中，我们通常使用POST请求来完成这样的任务。当我们提交一个HTML表单时，浏览器通常使用POST请求，并非所有POST请求都来自表单。我们可以使用一个POST向我们的应用程序传输任意的数据。在HTML表单中，数据使用一种标准的方式进行编码，然后以参数的形式传给Request对象，在Python中，使用urllib.parse库来完成数据的编码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="kn">import</span> <span class="nn">urllib.parse</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://www.someserver.com/cgi-bin/register.cgi&#39;</span>
</span><span class='line'>  <span class="n">values</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span> <span class="p">:</span> <span class="s">&#39;Michael Foord&#39;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;location&#39;</span> <span class="p">:</span> <span class="s">&#39;Northampton&#39;</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;language&#39;</span> <span class="p">:</span> <span class="s">&#39;Python&#39;</span><span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">req</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">url</span> <span class="n">lib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>  <span class="n">the_page</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，有时候需要设置其它的编码方式（如上传文件的HTML表单——更多的介绍参见HTML规范中的表单提交）。</p>

<p>如果不传递参数data，则urllib使用GET请求。GTE请求与POST请求之间存在区别，其中一个区别是POST请求往往存在副作用，它可以以某种方式改变系统的状态。尽管HTTP协议的标准制定者清楚知道POST请求总是会产生副作用，GET请求永远不会引起副作用，没有什么能够使GET请求生产副作用，也没有什么能够使用HOST请求无副作用。数据也可以在HTTP GET请求中，通过URL编码的方式进行传递。通过以下方式实现：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">urllib.parse</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">data</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Somebody Here&#39;</span>
</span><span class='line'>  <span class="n">data</span><span class="p">[</span><span class="s">&#39;location&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Northhampton&#39;</span>
</span><span class='line'>  <span class="n">data</span><span class="p">[</span><span class="s">&#39;language&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;Python&#39;</span>
</span><span class='line'>  <span class="n">url_values</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">parse</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="n">url_values</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;http://www.example.com/example.cgi&#39;</span>
</span><span class='line'>  <span class="n">full_url</span><span class="o">=</span><span class="n">url</span> <span class="o">+</span> <span class="s">&quot;?&quot;</span> <span class="o">+</span> <span class="n">url_values</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">full_url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意，通过添加符号?并紧跟着编码好的值在其后的方式来创建完整的URL。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Java实现一个ICE应用]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/21/writing-an-ice-application-with-java/"/>
    <updated>2013-10-21T23:30:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/21/writing-an-ice-application-with-java</id>
    <content type="html"><![CDATA[<p>注意:本文翻译自ice官方文档</p>

<p>本文实现了一个简单的（但是完整的）客户端和服务器。</p>

<p>实现一个ICE应用程序包括以下几个步骤：</p>

<ol>
<li>完成slice定义并编译。</li>
<li>实现一个服务器并编译。</li>
<li>实现一个客户端并编译。</li>
</ol>


<p>如果已经实现了服务器，那么只需要写一个客户端，并且不需要写slice定义，只进行编译就行（很明显，在此情况下也不用实现服务器）。</p>

<p>本文描述的应用可以将客户端发送的文本在远程的服务器进行有序打印。为简单起见，我们的打印机会将文本简单地打印到终端，而不是真正的通过打印机打印。这样的目的只是为了显示客户端如何与服务器进行通信。一旦控制线程执行到了服务器应用程序的代码，就可以做任何它喜欢的事（包括将文本发送到真正的打印机上）。如何做到这一点是ICE提供的功能，本文并不涉及。</p>

<h4>Slice定义</h4>

<p>编写ICE应用程序的第一步写一个slice文件，其中包含了应用程序使用的接口。对于我们这个小小的打印程序，我们编写以下Slice定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module Demo{
</span><span class='line'>      interface Printer{
</span><span class='line'>          void printString(string s);
</span><span class='line'>      }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>我们将这个文本文件保存为Printer.ice.</p>

<p>Slice定义中，包含模块Demo,该模块仅仅包含一个称为Printer的接口。对于这个应用程序，接口只提供了一个单一的操作printString.该操作接受一个字符串作为其唯一的输入参数。字符串的文本内容是什么（可能在远程），打印机就打印什么。</p>

<h4>编译Slice文件</h4>

<p>创建Java应用程序的第一步是编译通过Slice定义的数据结构，以生成Java代理和框架。在Unix下，可以通过以下方式进行编译：</p>

<pre><code>$ mkdir generated
$ slice2java --output-dir generated Printer.ice
</code></pre>

<p>选项&#8211;output-dir将编译生成的文件输出到指定的目录下。这就避免了工作目录因生成大量的文件而造成混乱的现象。编译命令slice2java将slice定义的文件生成一些Java源文件。我们现在不用关心这些文件中的内容——它们包含了打印接口的代码，而这些接口我们定义在Printer.ice文件中。</p>

<h4>用Java编写并编译服务器</h4>

<p>为了实现我们的打印机接口，必须要创建一个servant类。按照惯例，servant类使用其接口名加一个后缀I。因此，我们的servant类称为PrinterI,并且源文件命名为PrinterI.java:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrinterI</span> <span class="kd">extends</span> <span class="n">Demo</span><span class="o">.</span><span class="na">_PrinterDisp</span><span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span><span class="n">Ice</span><span class="o">.</span><span class="na">Current</span> <span class="n">current</span><span class="o">){</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类PrinterI继承自一个称为_PrinterDisp的基类，该基类由slice2java编译器生成的，是一个抽象类，并且包含一个printString方法。该方法接受一个需要打印的字符串和一个类型为Ice.Current的对象（现在我们将忽略参数Ice.Current）.我们实现的printString方法，只是将字符串打印到终端。</p>

<p>服务器的其它代码在源文件Server.java中，其完整的代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span><span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>              <span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Ice</span><span class="o">.</span><span class="na">ObjectAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">createObjectAdapterWithEndpoints</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">,</span><span class="s">&quot;defalut -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Ice</span><span class="o">.</span><span class="na">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrinterI</span><span class="o">();</span>
</span><span class='line'>              <span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">,</span><span class="n">ic</span><span class="o">.</span><span class="na">stringToIdentity</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">));</span>
</span><span class='line'>              <span class="n">adapter</span><span class="o">.</span><span class="na">activate</span><span class="o">();</span>
</span><span class='line'>              <span class="n">ic</span><span class="o">.</span><span class="na">waitForShutdown</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                  <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>请注意，代码的结构通常如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span><span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>              <span class="c1">//在这里实现服务器</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStakcTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span> <span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="c1">//清除</span>
</span><span class='line'>              <span class="c1">//</span>
</span><span class='line'>              <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">printlne</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                  <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在main函数的主体部分中，包含了一个捕获异常的try语句，并且在try语句中包含了所有服务器代码，随后有两个catch语句。其中第一个catch捕获所有ICE运行环境可能抛出的异常。该部分代码的目的是不管代码在任何地方遇到了意想不到的ICE运行时异常，退出当前的堆栈回到主函数中。第二个捕获异常的catch语句的目的是当代码某个地方遇到一个致命的错误时，可以简单地抛出一个异常，并携带一个错误信息。同样的，代码退出当前的堆栈回到主函数当中，并打印错误信息，然后向操作系统返回失败的结果。</p>

<p>在代码退出之前，如果通信器(communicator)创建成功，则需要销毁它。这样做的目的是为了正确的终止ICE运行时环境：程序必须调用communicator对象的destory，否则会产生未知的结果。</p>

<p>try代码块中包含的服务器代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Ice</span><span class="o">.</span><span class="na">ObjectAdapter</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">createObjectAdapterWithEndpoints</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">,</span><span class="s">&quot;defalut -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Ice</span><span class="o">.</span><span class="na">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrinterI</span><span class="o">();</span>
</span><span class='line'>  <span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">,</span><span class="n">ic</span><span class="o">.</span><span class="na">stringToIdentity</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">adpater</span><span class="o">.</span><span class="na">activate</span><span class="o">();</span>
</span><span class='line'>  <span class="n">ic</span><span class="o">.</span><span class="na">waitForShutdown</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>服务器代码包含了以下几个步骤：</p>

<ol>
<li>我们通过Ice.Util.initialize方法初始化ICE运行时环境（由于服务器可能以命令行的方法运行，因此，在调用该方法时传递了参数args，在本例中，服务器不需要命令行参数）。初始化方法返回一个类Ice.Communicator对象的引用，这是ICE运行时环境主要的对象。</li>
<li>通过Communicator对象实例的createObjectAdapterWithEndpoints方法创建一个适配器对象，我们传递了两个字符串参数，第一个参数为SimplePrinterAdpater(适配器的名称)，另外一个参数是字符串default -p 10000,指示了适配器使用默认的协议（TCP/IP）监端口号10000的网络请求。</li>
<li>此时，服务端运行环境初始化完成，然后实例化一个PrinterI对象为我们的打印机接口创建一个服务。</li>
<li>通过调用适配器对象的add方法添加servant到运行时环境中，add方法的第一个参数为我们实例化的servant对象，另外一个参数是一个标识符，表示servat的名称，在这个例子中，即字符串&#8221;SimplePrinterAdapter&#8221;（如果有我们有多个打印机，每个将有一个不同的名字，或者更确切地说，拥有不同的对象标识）。</li>
<li>接下来，通过调用adapter对象的activate方法激活适配器（适配器最初处于未激活状态，假设有多个servant，并且共享同一个适配器，如果我想要甩的servant未被实例化之后才处理请求，那么适配器最初为未激活是非常有用的）。</li>
<li>最后，调用waitForShutdown挂用调用的线程，直到服务因调用一个方法终止运行时环境或者接收到一个终止。（在本例子中，当我们不再需要它时，可以通过命令行简单地中断服务器。）</li>
</ol>


<p>需要注意的是，虽然本例中的代码非常少，但这些代码对所有的服务器都适用的。为了方便，可以将这些代码放在一个辅助类中，此后，就不必再修改它（ICE提供了这样的辅助类Ice.Application）。对于本例的应用程序代码，实际上只包住了几行：定义PrinterI类用了7行代码，而实例化PrinterI对象并将其注册到适配器中只用了三行代码。</p>

<p>我们通过以下方式编译服务器代码：</p>

<pre><code>$ mkdir classes
$ javac -d classes -classpath classes:$ICE_HOME/lib/Ice.jar \
  Server.java PrinterI.java generated/Demo/*.java
</code></pre>

<p>通过以上方式将应用程序代码和IE编译器生成的代码都进行了编译，其中环境变量ICE_HOME为包含ICE运行时环境的根目录（例如，如果将ICE安装在/opt/ice目录下，则ICE_HOME的值应该设置为/opt/ice）。值得注意的是，对于JAVA的ICE环境中，使用了ant环境对源代码进行控制（ant类似于make，但是对java应用来说比较灵活），你可以看看ant的示例程序，以掌握如何使用该工具。</p>

<h4>编写并编译Java客户端</h4>

<p>客户端代码包含在Client.java源文件中，跟服务器代码非常相似，完整的代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>          <span class="k">try</span><span class="o">{</span>
</span><span class='line'>              <span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Ice</span><span class="o">.</span><span class="na">ObjectPrx</span> <span class="n">base</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">stringToProxy</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter:default -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Demo</span><span class="o">.</span><span class="na">PrinterPrx</span> <span class="n">printer</span> <span class="o">=</span> <span class="n">Demo</span><span class="o">.</span><span class="na">PrinterPrxHelper</span><span class="o">.</span><span class="na">checkedCast</span><span class="o">(</span><span class="n">base</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span><span class="o">(</span><span class="n">printer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                  <span class="k">throw</span> <span class="k">new</span> <span class="nf">Error</span><span class="o">(</span><span class="s">&quot;Invalid proxy&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>              <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="c1">// 清除</span>
</span><span class='line'>              <span class="c1">//</span>
</span><span class='line'>              <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                  <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>              <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                  <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：客户端的代码布局总体上跟服务器的布局是一样的，使用一个try catch块来处理错误，在try代码块中执行以下的操作：</p>

<ol>
<li>跟服务器一样，客户端通过调用Ice.Util.initialize方法初始化ICE运行时环境。</li>
<li>下一步的操作是取得远程打印的代理，通过调用通信器对象上的stringToProxy方法创建这个代理对象，并传字符串参数&#8221;SimplePrinterAdapter:default - 10000&#8221;。请注意该字符串中包含了对象的标识和服务器所使用的端口（显然，在将对象标识和端口硬编码到应用是不是一个好的主意，但在我们的应用中是可以工作的，当我们讨论IceGrid时，会遇到更加合理的方式）。</li>
<li>方法stringToProxy返回的代码对象的类型是Ice.ObjectProxy,它处在接口和类的父类。但实际上我们只与打印机交互，需要一个打印机接口的代理，而不是一个Object接口的代理。为了做到这一点，我们通过调用PrinterPrxHelper。checkedCast方法向下转型。该方法会向服务器发送检查和转型相关的请求，相当是向服务器询问“这是一个打印机接口的代理吗？”如果是的话，将返回一个Demo.Printer对象的代理，否则，如果是一些其它类型的接口，返回null。</li>
<li>接下来，需要测试下类型向下转型是否成功，如果没有，则抛出一个异常，终止客户端。</li>
<li>现在在我们的地址空间有一个可用的代理对象，并且可以调用printString方法，传递一个具有悠久历史的&#8221;Hello World!&#8221;字符串作为参数，服务器将会在终端在打印该字符串。</li>
</ol>


<p>然后像编译服务器代码一样编译客户端代码：</p>

<pre><code>$ javas -d classes -classpath classes::$ICE_HOME/lib/Ice.jar \
  Client.java PrinterI.java generated/Demo/*.java
</code></pre>

<h4>运行客户端和服务器</h4>

<p>为了运行客户端和服务器，我们首先在一个窗口中运行服务器：</p>

<pre><code>$ java Server
</code></pre>

<p>目前，在服务端我们将看不任何东西，因为服务器只是简单地等待客户端连接它。我们在另外一个窗口中运行客户端：</p>

<pre><code>$ java Client
$
</code></pre>

<p>客户端运行并退出后，并不会输出任何东西。但是，在服务器的窗口中，我们看到打印了字符串“Hello World！”。如果要终止服务器，可以通过命令行中断程序。（在讨论Ice.Application中，我们将看到更简洁的方式来终止服务器。）</p>

<p>如果出现任何未知的错误，客户端将打印错误信息。例如，如果在运行客户端之前未启动服务哭喊，我们将得到类似下面的错误信息：</p>

<pre><code>Ice.ConnectionRefusedException
   error = 0
    at IceInternal.ConnectRequestHandler.getConnection(ConnectRequestHandler.java:240)
    at IceInternal.ConnectRequestHandler.sendRequest(ConnectRequestHandler.java:138)
    at IceInternal.Outgoing.invoke(Outgoing.java:66)
    at Ice._ObjectDelM.ice_isA(_ObjectDelM.java:30)
    at Ice.ObjectPrxHelperBase.ice_isA(ObjectPrxHelperBase.java:111)
    at Ice.ObjectPrxHelperBase.ice_isA(ObjectPrxHelperBase.java:77)
    at Demo.HelloPrxHelper.checkedCast(HelloPrxHelper.java:228)
    at Client.run(Client.java:65)
    Caused by: java.net.ConnectException: Connection refused
     ...
</code></pre>

<p>需要注意的是，服务器和客户端要运行成功，CLASSPATH路径中必须包含ICE类库和类的目录，例如：</p>

<pre><code>$ export CLASSPATH=$CLASSPATH:./classes:$ICE_HOME/lib/Ice.jar
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ICE Chat Demo(中文翻译)]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/20/ice-chat-demo/"/>
    <updated>2013-10-20T10:36:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/20/ice-chat-demo</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>ZeroC提供了一个简单的应用，该应用允许用户接入一个聊天室，并且与其它用户进行聊天。此聊天应用提出了一些有趣的设计，这些设计在开发一个分布式应用时，可能会成为我们面临的挑战，因此它是一个极好的案例研究。</p>

<p>聊天应用使用C++实现了服务端，客户端可以使用不同的语言，图形化程序使用C#, Java和C++，控制台程序使用C++实现，而基于web的客户端程序使用Java(applet), PHP和ActionScript.应用程序的各个组成部分由下图所示，我们将在后面的章节中对这些组件进行详细地探讨。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-01.png"></p>

<p>ZeroC提供了一个公共的聊天服务器，你可以通过以下几种方式使用它：</p>

<ul>
<li>通过浏览器使用PHP, Silverlight, Applet或者Flash客户端进行聊天。</li>
<li>下载编译好的Java或者.Net图形客户端。</li>
<li>使用ICE支持的语言自己实现一个客户端。</li>
</ul>


<p>如果你愿意，也可以下载完整的应用程序源代码，并在自己的系统上运行。</p>

<p>点击下面的链接继续阅读我们的聊天应用程序的介绍。如果对更详细的讨论感兴趣，请参阅更详细的<a href="http://www.zeroc.com/chat/articles.html">技术文章</a>。</p>

<h3>内容</h3>

<h5>ICE是什么</h5>

<p>ICE（Internet Communications Engine）是一个分布式计算平台。它支持多种操作系统，编译器和编程语言，并允许你创建异构的分布式应用程序。换句话说，ICE让您轻松地创建分布式应用程序，并且可以运行在不同的操作系统上，同时可以用不同的语言编写，ICE允许这些应用程序无缝地进行交互，如下图所示。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-02.png"></p>

<h5>Slice</h5>

<p>无论开发者使用什么语言来实现应用程序，一种称为Slice的规范语言可以为应用程序定义类和接口。然后，编译器将这种独立于语言的规范转换成特定语言的API。生成的API考虑到了许多通信细节，而这些通信细节实现起来往往是比较困难的，否则需要开发者自己去实现。下图显示了一个典型的ICE应用的C++工具链。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-03.png"></p>

<h5>客户端和服务端</h5>

<p>在其它的分布式系统中，ICE应用由客户端和服务端组成，并共同完成任务。术语客户端和服务端不是应用程序特定部分的固定设计模式，相反，它们表示应用程序请求的角色。</p>

<ul>
<li>客户端是主动的实体，发送服务请求到服务器。</li>
<li>服务是被动的实体，响应客户端的请求并提供服务。</li>
</ul>


<p>从理论上来讲，一个服务器只响应请求，但不发送请求。同样地，一个客户端只发送请求但不提供服务，如下图所示。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-04.png"></p>

<p>作为一个客户端和服务器程序，这是很常见的。例如，客户端可能在服务器上启动一个长时间运行的操作，作为启动操作的一部分，客户端可以向服务器提供一个回调操作，当启动操作完成后，服务器可以通过回调通知客户端，在此情况下，当客户端执行启动操作时，客户端充当客户端的角色，而当服务器通知操作完成时，客户端又充当服务器的角色，如下图所示。因此，通常将客户端-服务器系统描述为对等系统更为准确。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-05.png"></p>

<h5>对象和代理</h5>

<p>一个ICE对象是对一个本地或者远程实体的抽象，并且可以响应客户端请求。它有一个唯一的标识和表示对象支持的一些已命名的操作的接口，这些对象可以支持更多的接口。客户端通过调用对象的方法向服务器发送请求。</p>

<p>一个代理是客户端用来访问ICE对象的句柄。除了代理代表远程地址空间的一个对象以外，你可以认为代理类似于C++中的指针或者Java中的引用。当客户端调用代理的一个方法时，ICE运行环境需要小心地定位对象，如果有必要，启动服务器实例化对象，并且在客户端和服务器之间传递参数。</p>

<p><img class="center" src="http://jackliu8722.github.com/images/ice-chat-demo/ice-chat-demo-06.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper-源码分析(二)——Server启动流程]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/16/zookeeper-yuan-ma-fen-xi-02-serverqi-dong-liu-cheng/"/>
    <updated>2013-10-16T08:23:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/16/zookeeper-yuan-ma-fen-xi-02-serverqi-dong-liu-cheng</id>
    <content type="html"><![CDATA[<p>Zookeeper中，server的启动入口为类org.apache.zookeeper.server.quorum.QuorumPeerMain的main方法，由zkServer.sh脚本调用。其main方法的内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">QuorumPeerMain</span> <span class="n">main</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeerMain</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">main</span><span class="o">.</span><span class="na">initializeAndRun</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Invalid arguments, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">USAGE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">USAGE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ConfigException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Invalid config, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid config, exiting abnormally&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unexpected exception, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Exiting normally&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在main方法，调用了类QuorumPeerMain的initializeAndRun方法做后续的处理，其源码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initializeAndRun</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">ConfigException</span><span class="o">,</span> <span class="n">IOException</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="c1">//创建配置类</span>
</span><span class='line'>        <span class="n">QuorumPeerConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeerConfig</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//如果只有一个参数，则调用配置类的parse方法解析配置文件</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">config</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 启动并调度清理任务，定时清理数据目录下的数据</span>
</span><span class='line'>        <span class="n">DatadirCleanupManager</span> <span class="n">purgeMgr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatadirCleanupManager</span><span class="o">(</span><span class="n">config</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getDataDir</span><span class="o">(),</span> <span class="n">config</span><span class="o">.</span><span class="na">getDataLogDir</span><span class="o">(),</span> <span class="n">config</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getSnapRetainCount</span><span class="o">(),</span> <span class="n">config</span><span class="o">.</span><span class="na">getPurgeInterval</span><span class="o">());</span>
</span><span class='line'>        <span class="n">purgeMgr</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//运行quorum模式</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">config</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">runFromConfig</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//无配置文件，或者服务的数量为0，运行standalone模式</span>
</span><span class='line'>            <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Either no config or no quorum defined in config, running &quot;</span>
</span><span class='line'>                    <span class="o">+</span> <span class="s">&quot; in standalone mode&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// there is only server in the quorum -- run as standalone</span>
</span><span class='line'>            <span class="n">ZooKeeperServerMain</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在initializedAndRun方法中，zookeeper首先创建QuorumPeerConfig类解析配置文件，然后根据配置是否存在和server的数量选择运行的模式。如果无配置文件或者server的数量为1(即只有当前server)，则运行standalone模式，即代码中执行ZookeeperServerMain.main(args),否则以quorum模式运行，即以QuorumPeerConfig的实例为参数运行runFromConfig函数，其代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runFromConfig</span><span class="o">(</span><span class="n">QuorumPeerConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ManagedUtil</span><span class="o">.</span><span class="na">registerLog4jMBeans</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Unable to register log4j JMX control&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Starting quorum peer&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ServerCnxnFactory</span> <span class="n">cnxnFactory</span> <span class="o">=</span> <span class="n">ServerCnxnFactory</span><span class="o">.</span><span class="na">createFactory</span><span class="o">();</span>
</span><span class='line'>          <span class="c1">//配置是客户端连接Zookeeper服务器的端口，以及最大连接数</span>
</span><span class='line'>          <span class="n">cnxnFactory</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getClientPortAddress</span><span class="o">(),</span>
</span><span class='line'>                                <span class="n">config</span><span class="o">.</span><span class="na">getMaxClientCnxns</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//创建管理quorum协议的QuorumPeer类</span>
</span><span class='line'>          <span class="n">quorumPeer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeer</span><span class="o">();</span>
</span><span class='line'>          <span class="c1">//设置客户端连接Zookeeper服务器的端口，Zookeeper会监听这个端口，接受客户端的访问请求</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setClientPortAddress</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getClientPortAddress</span><span class="o">());</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setTxnFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">FileTxnSnapLog</span><span class="o">(</span>
</span><span class='line'>                      <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getDataLogDir</span><span class="o">()),</span>
</span><span class='line'>                      <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getDataDir</span><span class="o">())));</span>
</span><span class='line'>          <span class="c1">//设置集群中的其它zookeeper</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setQuorumPeers</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getServers</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//设置选举算法</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setElectionType</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getElectionAlg</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//设置server ID</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMyid</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getServerId</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setTickTime</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getTickTime</span><span class="o">());</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMinSessionTimeout</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getMinSessionTimeout</span><span class="o">());</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMaxSessionTimeout</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getMaxSessionTimeout</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//initLimit配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setInitLimit</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInitLimit</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//syncLimit配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2*2000=4 秒</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setSyncLimit</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getSyncLimit</span><span class="o">());</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setQuorumVerifier</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getQuorumVerifier</span><span class="o">());</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setCnxnFactory</span><span class="o">(</span><span class="n">cnxnFactory</span><span class="o">);</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setZKDatabase</span><span class="o">(</span><span class="k">new</span> <span class="n">ZKDatabase</span><span class="o">(</span><span class="n">quorumPeer</span><span class="o">.</span><span class="na">getTxnFactory</span><span class="o">()));</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setLearnerType</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getPeerType</span><span class="o">());</span>
</span><span class='line'>          <span class="c1">//实现了Runable接口的start方法，启动线程。</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>          <span class="n">quorumPeer</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// warn, but generally this is ok</span>
</span><span class='line'>          <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Quorum Peer interrupted&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>runFromConfig的执行流程中，主要创建了QuorumPeer对象，该类定义了Server类型。首先根据配置对象中的配置信息设置相关的配置，然后调用start函数启动服务，QuorumPeer类将在后面的文章中进行详细地分析。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主成份分析(PCA)]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/16/pca/"/>
    <updated>2013-10-16T08:19:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/16/pca</id>
    <content type="html"><![CDATA[<p>主成份分析（Principal components analysis，PCA）是一种分析、简化数据集的技术。PCA在应用中使用得非常广泛，比如：降维、有损数据压缩、特征提取以及数据可视化。</p>

<p>对PCA的定义有两种常用的方法，但是最终都产生了相同的算法。第一种定义为将一个高维的数据投影到低维的线性空间上，这样的低维空间被称为主体子空间，投影后，使数据的方差最大化，该定义可称为最大方差理论。等价地，</p>

<h3>最大方差理论</h3>

<p>假设有一个样本数据集{$$$x_{n}$$$}，其中n=1,……,N，$$$x_{n}$$$为欧几时德空间中维度为D的变量。我们的目的是将数据投影到维数为M的空间上，并且使投影后数据的方差最大，其中$$$D&lt;M$$$。就目前而言，假设M的值是已知的，在后面，我们将通过数据集以确定一个合适的M值。</p>

<p>首先，我们考虑将数据投影到一个一维空间上，即M=1。定义该空间的方向向量用D维向量$$$u_1$$$表示，为了方便起见，我们应该选择一个单位向量以定义空间的方法，因此$$$u_1$$$应该满足 $$$ u_1 ^{T}u_1=1 $$$。我们只关心$$$u_1$$$所决定的方向，而不关心$$$u_1$$$本身。数据集中的每个数据$$$x_n$$$投影后得到一个标量$$$x_1 ^Tx_n$$$，投影后数据的均值为$$$u_1 ^T\bar{x}$$$，其中$$$\bar{x}$$$为样本数据的均值，由以下式子得到。\[\bar{x}={1 \over N}\sum_{n=1} ^Nx_n\]
投影后数据的均方差为\[ \bar{V} = {1 \over N} \sum_{n=1} ^N (u_1 ^T x_n - u_1 ^T \bar{x}) ^2\]</p>

<p>\[\Rightarrow \bar{V} = {1 \over N} \sum_{n=1} ^N (u_1 ^T x_n - u_1 ^T \bar{x}) (u_1 ^T x_n - u_1 ^T \bar{x}) ^T\]</p>

<p>\[\Rightarrow \bar{V} = {1 \over N} \sum_{n=1} ^N (u_1 ^T x_n - u_1 ^T \bar{x}) (x_n ^T u_1 - \bar{x} ^T u_1)\]</p>

<p>\[\Rightarrow \quad  \bar{V} = {1 \over N} \sum_{n=1} ^N u_1 ^T(x_n - \bar{x}) (x_n  - \bar{x}) ^Tu_1  \]</p>

<p>\[\Rightarrow \quad \bar{V} = u_1 ^T{1 \over N} \sum_{n=1} ^N (x_n - \bar{x}) (x_n - \bar{x}) ^Tu_1  \]</p>

<p>令</p>

<p>\[ S = {1 \over N} \sum_{n=1} ^N (x_n - \bar{x}) (x_n - \bar{x}) ^T  \]</p>

<p>因此，投影后数据的方差可以写成如下形式
\[ \bar{V} = {1 \over N} \sum_{n=1} ^N (u_1 ^T x_n - u_1 ^T \bar{x}) ^2 = u_1 ^T S u_1\]</p>

<p>现在我们寻找一个合适的向量$$$u_1$$$使用方差$$$u_1 ^T $u_1$$$最大。显示，这是一个带约束的最大化问题，我们可以选择$$$u_1 ^T u_1 = 1$$$作为约束条件，然后我们增加一个拉格朗日因子，得到一个不带约束条件的最大化问题
\[ L(u_1) = u_1 ^TSu_1 +\lambda_1(1-u_1 ^T u_1)\]
对$$$L(u_1)$$$求关于$$$u_1$$$的导数，有</p>

<p>\[\frac{\partial L(u_1)}{\partial u_1} = 2Su_1 - 2\lambda_1u_1\]
以上的求导过程会用到以下结论:
\[(1) \qquad \quad trABC=trCAB=trBCA\]
\[(2) \qquad \qquad \qquad trA=trA ^T \qquad \]
\[(3) \qquad tr(A+B)=trA +trB \qquad \]
\[(4) \qquad \qquad \nabla _AtrAB=B ^T \qquad \quad \]
\[(5) \qquad \nabla _{A ^T} f(A)=(\nabla _Af(A)) ^T \qquad \]
\[(6) \quad \nabla_AtrABA ^TC= CAB+C ^TAB ^T\]
其中，A, B, C为矩阵。</p>

<p>由$$$L(u_1)$$$的表达式有
\[\frac{\partial L(u_1)}{\partial u_1} = \nabla_{u_1}u_1 ^TSu_1 - \lambda _1\nabla _{u_1}u_1 ^T u_1\]
而</p>

<p>\[\nabla_{u_1}u_1 ^TSu_1=\nabla_{u_1}tru_1 ^TSu_1\]
\[ \qquad \qquad =\nabla_{u_1}tru_1u_1 ^TS\]
\[ \qquad \quad \qquad =\nabla_{u_1}tru_1Eu_1 ^TS \]
\[ \qquad \qquad \qquad =Su_1E+S ^Tu_1E ^T\]
\[ \qquad \qquad =2Su_1 \qquad  \]
因此$$$\nabla_{u_1}u_1 ^TSu_1 = 2Su_1$$$,其中，使用了条件$$$S=S ^T$$$,$$$E=E ^T$$$。</p>

<p>同样地，可以求得$$$\nabla_{u_1}u_1 ^T u_1=2u_1$$$，因此，有$$$\frac{\partial L(u_1)}{\partial u_1} = 2Su_1 - 2\lambda_1u_1$$$，令$$$\frac{\partial L(u_1)}{\partial u_1} = 0$$$,有\[ 2Su_1 - 2\lambda_1u_1 = 0\]
推导得到式子
\[Su_1 =\lambda_1u_1\]
也就是说，$$$u_1$$$必须是矩阵的一个特征向量，我们再左乘一个$$$u_1 ^T$$$得到
\[u_1 ^TSu_1 = u_1 ^T\lambda_1u_1 = \lambda_1 u_1 ^Tu_1\]
由$$$u_1 ^T u_1 = 1$$$可得\[u_1 ^TSu_1 = \lambda_1\]
因此，当我们设置$$$u_1$$$等于矩阵$$$S$$$的最大特征值的特征向量时，方差可取得最大值。此时，$$$u_1$$$称为第一主成分特征向量。</p>

<p>我们可以通过以增量的方式选择一个新的方向定义额外的主成分以使方差最大化，这些新选择的方向必须与已经选择的方向向量正交。假设我们考虑一个M维的投影空间，使方差最大化的最优线性投影为方差矩阵$$$S$$$的前M特征值对应的特征向量$$$u_1,&#8230;,u_M$$$，这个结论很容易使用前面的推导进行证明。</p>

<p>总结一下，主成分分析涉及到计算数据的均值$$$\bar {x}$$$和方差矩阵$$$S$$$，然后计算方差矩阵$$$S$$$前M大特征值对应的特征向量。寻找特征向量和特征值，以及其它与特征向量有关的分解定理的算法，可以在Golub and Van Loan (1996)的文章中找到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper-源码分析(一)——简介]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/09/zookeeper-yuan-ma-fen-xi-01-jian-jie/"/>
    <updated>2013-10-09T23:10:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/09/zookeeper-yuan-ma-fen-xi-01-jian-jie</id>
    <content type="html"><![CDATA[<h2>Zookeeper是什么</h2>

<p>Zookeeper是Hadoop的一个子项目，它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：维护配置信息(maintaining configuration information)、名字服务(naming service)、分布式同步(distributed synchronization)、组服务(group services)等等，以上的服务经常应用在分布式系统当中。</p>

<p>Zookeeper的目标是封装好复杂并易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户，从而降低用户实现分布式系统的难度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中显示数学公式]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/09/18/zai-octopresszhong-xian-shi-shu-xue-gong-shi/"/>
    <updated>2013-09-18T23:17:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/09/18/zai-octopresszhong-xian-shi-shu-xue-gong-shi</id>
    <content type="html"><![CDATA[<p>由于个人对机器学习比较感兴趣，而机器学习的学习过程中会遇到非常多的数学公式，因此，写博客的过程中离不开公式的撰写。</p>

<p>平时写博客是在Mou下进行的，而Mou是支持<a href="http://www.latex-project.org/"><strong>LaTeX</strong></a>的，因此，通过Mou写的公式在博客未发布前是可能预览的。但是博客发布，显示的却不是公式，而是一串字符串，在网上找了下，原来Octopress要支持数学公式是需要安装插件的，在网上找了找记下配置过程和大家分享。</p>

<h3>安装kramdown</h3>

<p>kramdown是什么，我这里就不多介绍了，有兴趣大家可以点击<a href="http://kramdown.rubyforge.org/"><strong>这里</strong></a>。
通过以下命令安装kramdown包</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install kramdown</span></code></pre></td></tr></table></div></figure>


<p>待安装完成之后进入 <em>OCTOPRESS_PATH/source/_includes/custom/</em> 目录，<em>OCTOPRESS_PATH</em>是Octopress的根目录。在该目录下找到head.html文件，在该文件中添加以下内容：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c">&lt;!--</span> <span class="nx">mathjax</span> <span class="nx">config</span> <span class="nx">similar</span> <span class="nx">to</span> <span class="nx">math</span><span class="p">.</span><span class="nx">stackexchange</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$$&#39;</span><span class="p">,</span><span class="s1">&#39;$$$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\(&quot;</span><span class="p">,</span><span class="s2">&quot;\\)&quot;</span><span class="p">]</span> <span class="p">],</span>
</span><span class='line'>      <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/x-mathjax-config&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Queue</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">all</span> <span class="o">=</span> <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">getAllJax</span><span class="p">(),</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">all</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">all</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">SourceElement</span><span class="p">().</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; has-jax&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span>
</span><span class='line'>   <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置完成之后，就可以在Mou中使用LaTeX来撰写数学公式，并且发布后能够正常显示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令集锦]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/09/18/linuxchang-yong-ming-ling-ji-jin/"/>
    <updated>2013-09-18T22:54:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/09/18/linuxchang-yong-ming-ling-ji-jin</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>本文主要把工作中和学习中遇到的一些常用的linux命令进行了整理，方便今后查阅，以节省时间，时间就是Money啊，哈哈……</p>

<h2>1. tail</h2>

<h3>作用</h3>

<p>该命令从指定的行开始将文件写到标准输出。使用tail命令的<strong>-f</strong>选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容。</p>

<h3>语法</h3>

<p>tail [  -f ] [  -c Number |  -n Number |  -m Number |  -b Number |  -k Number ] [ File ]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EM算法]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/09/08/emsuan-fa/"/>
    <updated>2013-09-08T20:30:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/09/08/emsuan-fa</id>
    <content type="html"><![CDATA[<h2>1 简介</h2>

<p>一直对EM算法有一种莫明的喜欢感，觉得它非常的神奇，其思想也非常的让人深思，给我的感觉就是一种美。</p>

<p>EM算法是最大期望算法(Exception-maximization algorithm)的简称。它是一种迭代算法，用于求含有隐变量的概率模型参数的极大似然估计。</p>

<p>EM算法经过两个步骤交替进行计算，从而求得概率模型的极大似然估计：</p>

<ol>
<li><p>第一步计算期望，也就是E，利用对隐变量的现在估计值，计算模型的极大似然估计值。</p></li>
<li><p>第二步是最大化过程，也就是M。该过程在第一步基础上计算模型到达极大值时参数的值。</p></li>
</ol>


<h2>2 EM算法的推导</h2>

<h4>2.1 算法的引入</h4>

<p>假设我们记n个观测样本为
\[x_1,x_2,x_3,…,x_k,…,x_n\]
<strong>注意:</strong>一般我们假设各样本之间满足独立同分布(independent and identically distributed, i.i.d)。</p>

<p>观测样本即为观测变量，可将所有的观测变量记为<strong>X</strong>。相应的，观测变量对应的隐变量为
\[z_1,z_2,z_3,…,z_k,…z_n\]
同样的，假设隐变量之间满足独立同分布，记所有的隐变量为<strong>Z</strong>。观测变量与隐变量的联合分布为 <strong>$$ P(X,Z |\theta )$$</strong></p>

<p>其中， $$$\theta$$$是模型的参数。</p>

<p>一般地，我们可以将观测变量X称为不完全数据，将(X,Z)称为完全数据(complete-data)。我们的目标是最大化$$$P(X|\theta)$$$，而
\[P(X|\theta)= \sum_{Z}P(X,Z|\theta) \]</p>

<p>假设Z是离散的（如果Z是连续的，可以用积分代替求和）。</p>

<p>在最大化$$$P(X|\theta)$$$的时候，如果不存在隐变量，我们可以直接通过最大似然估计求解模型的参数$$$\theta$$$，由于隐变量Z的存在，求解模型参数的最优值就变得比较困难了。但是求解完全数据的最大似然函数$$$P(X,Z|\theta)$$$的最优解是比较容易的。</p>

<h4>2.2 算法的推导</h4>

<p>从2.1节我们已经知道，我们的目标是最大化$$$P(X|\theta)$$$，而我们可以做如下的一些推导。
\[ P(X|\theta)={P(X,Z|\theta) \over P(Z|X,\theta) }\]
两边取对数
\[ \ln P(X|\theta)=\ln {P(X,Z|\theta) \over P(Z|X,\theta)}\]
即可得到
\[ \ln P(X|\theta)=\ln P(X,Z|\theta)  - \ln P(Z|X,\theta)\]
假设有分布$$$\ln q(Z)$$$，则有
\[ \ln P(X|\theta)=\ln P(X,Z|\theta)  - \ln q(Z) + \ln q(Z) - \ln P(Z|X,\theta)\]</p>

<p>\[ \ln P(X|\theta)=(\ln P(X,Z|\theta) - \ln q(Z)) - (\ln P(Z|X,\theta)-\ln q(Z))\]</p>

<p>\[ \ln P(X|\theta)={\ln {P(X,Z|\theta) \over q(Z)}} - {\ln {P(Z|X,\theta) \over q(Z)}}\]
等式两边同乘以$$$q(Z)$$$，并对Z求积分(Z是连续随机变量)或者求和(Z是离散随机变量)，假设Z是连接的，则有
\[ \int_{Z} q(Z)\ln P(X|\theta) \,dZ = \int_{Z}q(Z)({\ln {P(X,Z|\theta) \over q(Z)}} - {\ln {P(Z|X,\theta) \over q(Z)}})\,dZ \]</p>

<p>\[ \int_{Z} q(Z)\ln P(X|\theta) \,dZ = {\int_{Z}q(Z){\ln {P(X,Z|\theta) \over q(Z)}}\,dZ} - {\int_{Z}q(Z)\ln {P(Z|X,\theta) \over q(Z)}}\,dZ \]</p>

<p>\[ \int_{Z} q(Z)\ln P(X|\theta) \,dZ = {\int_{Z}q(Z){\ln {P(X,Z|\theta) \over q(Z)}}\,dZ} + {\int_{Z}q(Z)\ln {q(Z) \over P(Z|X,\theta)}}\,dZ \]</p>

<p>由于Z和X之间相互独立，因此有
\[ \int_{Z}q(Z)\ln P(X|\theta)\,dZ = \int_{Z}q(Z)\,dZ \ln(X|\theta) \]
而$$$\int_{Z}q(Z)\,dZ = 1$$$，因此有 $$$\int_{Z}q(Z)q(Z)\ln P(X|\theta)\,dZ = ln(X|\theta)$$$，则有
\[ \ln P(X|\theta) = {\int_{Z}q(Z){\ln {P(X,Z|\theta) \over q(Z)}}\,dZ} + {\int_{Z}q(Z)\ln {q(Z) \over P(Z|X,\theta)}}\,dZ \]
记
\[ \zeta(q,\theta)={\int_{Z}q(Z){\ln {P(X,Z|\theta) \over q(Z)}}\,dZ}\]</p>

<p>\[ KL(q||p) = {\int_{Z}q(Z)\ln {q(Z) \over P(Z|X,\theta)}}\,dZ\]
KL是KL距离，也就是Kullback-Leibler差异（Kullback-Leibler Divergence）的简称，也叫做相对熵（Relative Entropy）。它衡量的是相同事件空间里的两个概率分布的差异情况。其物理意义是：在相同事件空间里，概率分布P(x)的事件空间，若用概率分布Q(x)编码时，平均每个基本事件（符号）编码长度增加了多少比特。KL的一个重要性质是 $$$KL(P|Q)\ge0$$$，当且仅当$$$P=Q$$$时，等号成立。</p>

<p>则有\[ \ln P(X|\theta) = \zeta(q,\theta) + KL(q||p) \]</p>

<p>由于\[ KL(q||p) \ge 0 \]
则有\[ \ln P(X|\theta) \ge \zeta(q,\theta) \]
也就是说$$$\zeta(q,\theta)$$$是$$$\ln P(X|\theta)$$$的下界。</p>

<p>EM算法可以通过不断提高下界$$$\zeta(q,\theta)$$$的值来逼近$$$\ln P(X|\theta)$$$的最大值，因此EM算法分为以下两步通过迭代的方法求$$$\ln P(X|\theta)$$$的最大似然估计值：</p>

<ol>
<li>在E步中，假设当前的参数为$$$\theta ^{old}$$$，并固定参数$$$\theta ^{old}$$$不变，则最大化下界$$$\zeta(q,\theta ^{old})$$$与$$$q(Z)$$$有关，并且$$$\ln P(X|\theta ^{old})$$$与$$$q(Z)$$$不相关，因此，要使$$$\zeta(q,\theta)$$$最大，等价于使$$$KL(q||p)$$$最小，由KL距离的性质可知 $$$q(Z)=P(Z|X,\theta ^{old})$$$</li>
<li>在M步中，固定$$$q(Z)$$$，最大化下界$$$\zeta(q,\theta)$$$与$$$\theta$$$有关，即寻找一个新的值$$$\theta ^{new}$$$使得$$$\zeta(q,\theta ^{new})$$$最大。$$$\theta ^{new}$$$会使下界$$$\zeta(q,\theta)$$$的值增大（除非已经达到最大值），并且也一定会使似然函数的值增大，因为在M步中，分布q(Z)使用的是参数$$$\theta ^{old}$$$而不是参数$$$\theta ^{new}$$$，则$$$q(Z)\ne P(Z|X,\theta ^{new}) $$$，从而$$$KL(q||p)> 0$$$，因此，似然函数增大部分的值比仅提高下界多带来的增幅大，从而能够逼近$$$\ln P(X|\theta)$$$的最大似然估计。</li>
</ol>


<p>在最大化$$$\zeta(q,\theta)$$$的过程中，由 $$$q(Z)=P(Z|X,\theta ^{old})$$$ 可知
\[ \zeta(q,\theta)={\int_{Z}P(Z|X,\theta ^{old}){\ln {P(X,Z|\theta) \over P(Z|X,\theta ^{old})}}\,dZ}\]
\[ \zeta(q,\theta)={\int_{Z}P(Z|X,\theta ^{old})\ln P(X,Z|\theta)}\,dZ - {\int_{Z}P(Z|X,\theta ^{old})\ln P(Z|X,\theta ^{old})}\,dZ\]
由于$$${\int_{Z}P(Z|X,\theta ^{old})\ln P(Z|X,\theta ^{old})}\,dZ$$$为常数，则有
\[ \zeta(q,\theta)={\int_{Z}P(Z|X,\theta ^{old})\ln P(X,Z|\theta)}\,dZ + const \]
因此最大化$$$\zeta(q,\theta)$$$等价于最大化$$${\int_{Z}P(Z|X,\theta ^{old})\ln P(X,Z|\theta)}\,dZ$$$</p>

<h2>3 说明</h2>

<p>关于EM算法，作以下几点说明：</p>

<ol>
<li>参数的初始值可以任意选择，但需要注意的是EM算法对参数的初值是敏感的。</li>
<li>EM算法中，E步是就函数$$${\int_{Z}P(Z|X,\theta ^{old})\ln P(X,Z|\theta)}\,dZ$$$，我们可以定义Q函数 \[ Q(\theta,\theta ^{k}) = {\int_{Z}P(Z|X,\theta ^{k})\ln P(X,Z|\theta)}\,dZ\] 表示完全数据的对数似然函数$$$\ln P(Y,Z|\theta)$$$关于给定观测数据$$$Y$$$和给定参数$$$$\theta ^{k}$$$的条件下对未观测数据$$$Z$$$的条件概率分布$$$P(Z|X,\theta ^{k})$$$的期望，因此，Q函数也可以写成如下形式\[ Q(\theta,\theta ^{k}) = E_{Z}[\ln P(X,Z|\theta)|X,\theta ^{k}]\] 变元$$$\theta$$$表示需要极大化的参数，变元$$$\theta ^{k}$$$表示参数当前的估计值。</li>
<li>EM算法中，M步是在求$$$Q(\theta,\theta ^{k})$$$的极大化，完成一次迭代$$$\theta ^{k} \rightarrow\theta ^{k+1}$$$。</li>
<li>EM算法迭代的停止条件一般为，给定较小的正数$$$\varepsilon _{1},\varepsilon _{2}$$$，若满足 \[\parallel \theta ^{k+1} - \theta ^{k} \parallel &lt; \varepsilon _{1}\] 或 \[\parallel Q(\theta ^{k+1},\theta ^{k}) - Q(\theta ^{k},\theta ^{k}) \parallel &lt; \varepsilon_{2}\] 则停止迭代。每次迭代其实是在求Q函数及其极大化。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的安装与配置]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/09/05/octopressde-an-zhuang-yu-pei-zhi/"/>
    <updated>2013-09-05T17:35:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/09/05/octopressde-an-zhuang-yu-pei-zhi</id>
    <content type="html"><![CDATA[<p>  Octopress在这里就不多介绍了，它是一个轻量级的开源博客系统，用Ruby实现的。如果想搭建自己的博客系统，可以选择这个开源的东东，而且还可以托管到github上，相当的不错。想了解更多的信息， 在google里搜搜就知道了。
  Octopress的安装与配置网上有大量的文章，我这里也不再单独写个文章来介绍，其实写出来与网上的安装过程大同小异，这里只是记录了安装与配置的相关文章地址，方便大家。鄙视者可以拍砖的哟！！！！</p>

<p>1 <a href="http://octopress.org/"><strong>Octopress主页</strong></a></p>

<p>2  <a href="http://www.cnblogs.com/rubylouvre/archive/2012/06/10/2543706.html"><strong>利用GitHub Pages安装部署Octopress博客</strong></a></p>

<p>3 <a href="http://www.360doc.com/content/12/0216/17/1016783_187135339.shtml"><strong>Octopress个性化配置</strong></a></p>

<p>4 <a href="http://caok1231.iteye.com/blog/1565853"><strong>为Octopress增加文章分类</strong></a></p>

<p>5 <a href="http://geron.heroku.com/blog/2012/03/octo-cate-cn-spo/"><strong>Octopress博客分类添加中文支持</strong></a></p>

<p>6 <a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/"><strong>Octopress添加中文支持另外一种方法</strong></a></p>

<p>  目前就这些吧，今后发现什么好的插件再更新，哈哈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://jackliu8722.github.com/blog/2012/12/17/hello-octopress/"/>
    <updated>2012-12-17T20:16:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2012/12/17/hello-octopress</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>   以前光顾着学习了，不爱写博客，马上就要工作了，得养成写博客总结的习惯，从现在做起吧。Hello World大家都见过很多了，今天我来写个Hello Octopress，其实大家都明白，跟Hello World没啥区别，让我们开始吧。</p>

<h2>Hello Octopress</h2>

<figure class='code'><figcaption><span>hello_octopress.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">HelloOctopress</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">msg</span> <span class="o">=</span> <span class="s">&quot;Hello Octopress!&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>          <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">msg</span>
</span><span class='line'><span class="n">ho</span> <span class="o">=</span> <span class="n">HelloOctopress</span><span class="p">()</span>
</span><span class='line'><span class="n">ho</span><span class="o">.</span><span class="k">print</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>结论</h2>

<p>哈哈，代码就几行，Hello Octopress完成！
期待自己写一篇精彩的文章！
Good luck!</p>
]]></content>
  </entry>
  
</feed>
