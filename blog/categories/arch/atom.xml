<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[博客分类: 架构 | 精神兵的 Blog]]></title>
  <link href="http://jackliu8722.github.com/blog/categories/arch/atom.xml" rel="self"/>
  <link href="http://jackliu8722.github.com/"/>
  <updated>2016-11-29T14:39:37+08:00</updated>
  <id>http://jackliu8722.github.com/</id>
  <author>
    <name><![CDATA[jackliu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thrift网络请求包格式详解]]></title>
    <link href="http://jackliu8722.github.com/blog/2016/01/06/thrift-network-package-introduce/"/>
    <updated>2016-01-06T14:54:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2016/01/06/thrift-network-package-introduce</id>
    <content type="html"><![CDATA[<p>写这篇文章的主要原因是近期项目通过Thrift进行通信时，thrift服务端解析客户端发送的数据错误，导致某些请求失败（后面解析其原因）。在查询问题原因的过程中把Thrift发送给服务端的数据包代码阅读了一下，在这里做一下笔记。</p>

<h2>Thrift支持的数据类型</h2>

<p>Thrift客户端与服务端通信时，数据包按照一定的协议进行组织，协议最基本单元就是数据类型，以下是Thrift支持的数据类型：</p>

<p><code>java
public final class TType {
  public static final byte STOP   = 0;
  public static final byte VOID   = 1;
  public static final byte BOOL   = 2;
  public static final byte BYTE   = 3;
  public static final byte DOUBLE = 4;
  public static final byte I16    = 6;
  public static final byte I32    = 8;
  public static final byte I64    = 10;
  public static final byte STRING = 11;
  public static final byte STRUCT = 12;
  public static final byte MAP    = 13;
  public static final byte SET    = 14;
  public static final byte LIST   = 15;
  public static final byte ENUM   = 16;
}
</code>
上面的TType类来自org.apache.thrift.protocol包，主要定义thrift目前支持的数据类型，在传输时根据应用层定义的消息按类型组织数据包</p>

<h2>消息发送过程</h2>

<p>假设我们定义了一个thrift idl文件，内容如下：</p>

<p>```java
namespace java com.test.api</p>

<p>service Api{</p>

<pre><code>map&lt;string,string&gt; test(1:map&lt;string,string&gt; params);
</code></pre>

<p>}
```</p>

<p>通过thrift生成相应的java文件，当用户调用test方法时，具体的调用流程如下：
Api.Client.test -> Api.Client.send_test ->  TServiceClient.sendBase -> TBase.write
下面具体介绍各方法是怎么把消息组织起来的。</p>

<h4>Api.Client.test</h4>

<p>```java
public Map&lt;String,String> test(Map&lt;String,String> params) throws org.apache.thrift.TException
{</p>

<pre><code>send_test(params);
return recv_test();
</code></pre>

<p>}
```
该接口是应用层客户端调用的，其实它的工作很简单，传递参数并调用send_test进行发送消息，发送完成后接收服务端的响应，这个操作是一个同步操作，这里暂时不做介绍。</p>

<h4>Api.Client.send_test</h4>

<p>```java
public void send_test(Map&lt;String,String> params) throws org.apache.thrift.TException
{</p>

<pre><code>test_args args = new test_args();
args.setParams(params);
sendBase("test", args);
</code></pre>

<p>}
```
send_test接口的工作其实也很简单，new一个参数类（参数类是thrif根据idl文件生成的），并设置应用层提供的参数，然后调用sendBase方法。</p>

<h4>TServiceClient.sendBase</h4>

<p><code>java
protected void sendBase(String methodName, TBase args) throws TException {
   this.oprot_.writeMessageBegin(new TMessage(methodName, (byte)1, ++this.seqid_));
   args.write(this.oprot_);
   this.oprot_.writeMessageEnd();
   this.oprot_.getTransport().flush();
}
</code>
该方法才是真正的组织消息包了，首先调用oprot_的writeMessageBegin将新建的TMessage对象写入到协议中，TMessage是什么？其实就是对方法名、类型和顺序号进行了封装，没做其它什么工作，具体的类如下：</p>

<p>```java
package org.apache.thrift.protocol;</p>

<p>public final class TMessage {</p>

<pre><code>public final String name;
public final byte type;
public final int seqid;

public TMessage() {
    this("", (byte)0, 0);
}

public TMessage(String n, byte t, int s) {
    this.name = n;
    this.type = t;
    this.seqid = s;
}

public String toString() {
    return "&lt;TMessage name:\'" + this.name + "\' type: " + this.type + " seqid:" + this.seqid + "&gt;";
}

public boolean equals(Object other) {
    return other instanceof TMessage?this.equals((TMessage)other):false;
}

public boolean equals(TMessage other) {
    return this.name.equals(other.name) &amp;&amp; this.type == other.type &amp;&amp; this.seqid == other.seqid;
}
</code></pre>

<p>}
```
把方法名等写入到协议后，就需要对方法的参数进行写入，参数的写入由TBase的子类实现（后面会进行分析），参数写入完成后，就完成了对协议的封装，就可以调用传输层进行消息的发送了。</p>

<h4>TBase.write</h4>

<p>TBase.write是一个接口，其具体的实现是由test_args类完成的，其源码如下：</p>

<p><code>java
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
  schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
}
</code>
咦，怎么还有一层封装，那我们看看schemes是什么东东。</p>

<p>```java
private static final Map&lt;Class&lt;? extends IScheme>, SchemeFactory> schemes = new HashMap&lt;Class&lt;? extends IScheme>, SchemeFactory>();
static {</p>

<pre><code>schemes.put(StandardScheme.class, new test_argsStandardSchemeFactory());
schemes.put(TupleScheme.class, new test_argsTupleSchemeFactory());
</code></pre>

<p>}
```
原来是通过TProtocol的getScheme方法得到具体的scheme类作为Map的key获取SchemeFactory,然后调用相应SchemeFactory的write方法进行对参数的写入。那TProtocol的scheme是什么呢？我们看一下TProtocol的getScheme方法。</p>

<p>```java
public Class&lt;? extends IScheme> getScheme() {</p>

<pre><code>return StandardScheme.class;
</code></pre>

<p>}
```
原来抽象类TProtocol将StandardScheme.class作为默认的scheme类，那就好办了，其实最终调用的是test_argsStandardSchemeFactory类的write方法对参数进行写入。我们再看看test_argsStandardSchemeFactory的write方法。</p>

<p>```java
private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("test_args");</p>

<p>private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)1);</p>

<p>public void write(org.apache.thrift.protocol.TProtocol oprot, test_args struct) throws org.apache.thrift.TException {
   struct.validate();</p>

<p>   oprot.writeStructBegin(STRUCT_DESC);//按照协议要求写入struct描述
   if (struct.params != null) {</p>

<pre><code> oprot.writeFieldBegin(PARAMS_FIELD_DESC); //按照协议要求写入fild描述
 {
        //写入map对应key和value的类型，以及元素个数
    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
    //遍历map，将key和value写入到协议中
    for (Map.Entry&lt;String, String&gt; _iter24 : struct.params.entrySet())
    {
        oprot.writeString(_iter24.getKey());
        oprot.writeString(_iter24.getValue());
    }
    oprot.writeMapEnd();
 }
 oprot.writeFieldEnd();
</code></pre>

<p>   }
   oprot.writeFieldStop();
   oprot.writeStructEnd();
 }
```
其实代码逻辑已经非常清楚了，唯一可能还需要了解的oprot的实现，Thrift默认使用二进制协议TBinaryProtocol类写所有的数据。</p>

<h2>二进制协议类TBinaryProtocol</h2>

<p>二进制协议类TBinaryProtocol作为Thrift默认协议进行读写数据，下面介绍一些主要方法，便于理解协议包的数据组织。</p>

<p>```java
public void writeMessageBegin(TMessage message) throws TException {</p>

<pre><code>if (strictWrite_) {
     int version = VERSION_1 | message.type;
     writeI32(version);
     writeString(message.name);
     writeI32(message.seqid);
} else {
     writeString(message.name);
     writeByte(message.type);
     writeI32(message.seqid);
}
</code></pre>

<p>}</p>

<p>public void writeMessageEnd() {}
```
该方法将版本号、方法名和顺序号写入到协议中。</p>

<p>```java
public void writeFieldBegin(TField field) throws TException {</p>

<pre><code>writeByte(field.type);
writeI16(field.id);
</code></pre>

<p> }</p>

<p>public void writeFieldEnd() {}
```
该方法将参数类型和id写入到协议中。</p>

<p>```java
public void writeMapBegin(TMap map) throws TException {</p>

<pre><code>writeByte(map.keyType);
writeByte(map.valueType);
writeI32(map.size);
</code></pre>

<p>}</p>

<p>public void writeMapEnd() {}
```
当需要写入map时，将map对应key和value的类型，以及元素个数写入到协议中。</p>

<p>```java
public void writeString(String str) throws TException {</p>

<pre><code>try {
    byte[] dat = str.getBytes("UTF-8");
    writeI32(dat.length);
    trans_.write(dat, 0, dat.length);
} catch (UnsupportedEncodingException uex) {
    throw new TException("JVM DOES NOT SUPPORT UTF-8");
}
</code></pre>

<p>}
```
将string写入到协议中，首先写入string的长度，然后再写入string的字节数组。</p>

<p>其它方法就不在这里一一列出了，大家可以通过看源码进行了解。</p>

<h2>参数Map&lt;String,String>的消息格式</h2>

<p>下面我们以上面idl文件中test方法的参数作为例子，给出具体的协议格式，如下图：</p>

<p>{% img  center /images/2016-06/thrift-protocol-format.png %}</p>

<h2>开篇中的问题</h2>

<p>在本文开始的时候有提到，我们业务同学在使用thrift进行远程通信时，部分请求在服务端抛出了消息格式解析失败的异常。到底是什么原因呢？容我慢慢道来。我们接口传递的参数类型为Map&lt;String,String>，一般情况是用HashMap来实例化Map，我们知道HashMap的value是可以为NULL的，我们再看看writeString方法；</p>

<p>```java
public void writeString(String str) throws TException {</p>

<pre><code>try {
    byte[] dat = str.getBytes("UTF-8");
    writeI32(dat.length);
    trans_.write(dat, 0, dat.length);
} catch (UnsupportedEncodingException uex) {
    throw new TException("JVM DOES NOT SUPPORT UTF-8");
}
</code></pre>

<p>}
```
看到没有，writeString方法没有做NULL判断，那么当我们传递的参数为空时，会向上抛出异常NullPointerException，而在writeString没有进行处理，则会抛向test_argsStandardSchemeFactory的write方法中，而该类也未进行处理，则继续向上抛。通过跟踪源码发现，最终都未对该异常进行处理，那么最后当前客户端只是把部分数据写入到了协议的缓存中，且未调用TProtocol的flush方法进行发送。</p>

<p>当有新的调用时，会继续往该协议中写数据，如果这时Map中不存在为NULL的值，则会写入成功，然后调用flush方法将数据通过网络发送给服务端。这里协议数据包括两部分，第一部分是前一次写失败但有部分写入的数据，第二部分是一个完整的数据。当服务端接收到数据后通过协议进行解析时，是从第一部分开始的，由于数据不完整会造成解析失败，后面部分的数据也不会再进行处理了，这样的话就造成两个请求失败了。</p>

<p>以上就是问题的原因，最终的解决方法很简单，通知业务同学修改代码，对插入map的value进行空处理。更新代码后，此问题不再出现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信红包原理]]></title>
    <link href="http://jackliu8722.github.com/blog/2015/05/04/wei-xin-hong-bao-yuan-li/"/>
    <updated>2015-05-04T22:32:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2015/05/04/wei-xin-hong-bao-yuan-li</id>
    <content type="html"><![CDATA[<h5>注：本文是对微信群@QCon高可用架构群中的热火讨论，再加上微信同学的一些介绍所总结而出的一篇红包原理的文章</h5>

<p>相信大家都玩过微信红包，今天就跟大家分享一下微信红包的原理，仅供参考。</p>

<h3>发红包过程</h3>

<p>{% img  center /images/wei-xin-hong-bao-yuan-li/fa-hong-bao.png %}</p>

<p>微信发红包的过程如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层将红包信息以红包ID(sendId)为key写入到Cache层，红包记录包括红包个数Count、红包额度Money;</p>

<h4>步骤3：</h4>

<p>业务层将红步骤2中的红包信息同时也写入到db;</p>

<h5>注：步骤2和步骤3可以同时进行，执行完成之后业务层就可以将红包推送给群里用户了</h5>

<h3>点击进入红包过程</h3>

<p>{% img  center /images/wei-xin-hong-bao-yuan-li/dian-ji-jin-ru-hong-bao.png %}</p>

<p>用户点击进入红包的处理过程如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层根据红包id访问cache；</p>

<h4>步骤3：</h4>

<p>cache层将红包信息返回给业务层；</p>

<h4>步骤4：</h4>

<p>业务层根据红包的剩余个数(Count)决定客户端的最终结果，如果Count>0，表示红包可折，提示用户可以进行折红包，否则提示用户红包已被抢完；</p>

<h3>拆红包过程</h3>

<p>{% img  center /images/wei-xin-hong-bao-yuan-li/cai-hong-bao.png %}</p>

<p>用户拆红包的过程图如上图所示，详细过程如下：</p>

<h4>步骤1：</h4>

<p>请求通过前端负载均衡到达业务层；</p>

<h4>步骤2：</h4>

<p>业务层根据红包id访问cache；</p>

<h4>步骤3：</h4>

<p>cache层将红包信息返回给业务层，如果红包剩余个数（Count）等于0，说明红包已经被抢完，执行步骤7，直接返回提示用户红包已经被抢完，否则计算红包金额，计算的方式如下：生成从0.01元到剩余平均值2倍之间的一个随机数作为金额（当红包剩余个数为2时，有可能存在超过剩余金额的情况，但只要保证给最后一个红包剩余不少于0.01元的额度即可），最后一个红包直接取剩余额度即可。
步骤4：生成红包额度之后，通过Cache提供的 CAS操作更新红包信息(红包个数减1，剩余总额减去当成红包的额度)。</p>

<h4>步骤5：</h4>

<p>更新Cache之后，更新DB，记录当前被抢了的红包数和金额；</p>

<h4>步骤6：</h4>

<p>如果更新成功返回给业务层，更新失败，业务层可重试；</p>

<h4>步骤7：</h4>

<p>红包剩余个数为0，则返回，提示用户红包已经被抢完，或者更新DB之后，返回用户抢到红包的额度；</p>

<h5>注：有些同学讨论之后总结CAS操作在数据库层去执行，我觉得应该在Cache层更合适，因为Cache容易实现，而且Cache可以专门去做CAS操作，因此个人觉得Cache比较合适。</h5>

<h3>查询红包过程</h3>

<p>查询红包直接读Cache即可，如果红包未抢完，则返回已抢到红包的用户列表，否则返回用户列表的同时，还计算是最佳手气用户，最佳手气的影响因素有两个，一个是红包大小，一个是时间，红包最大者手气最佳，如果存在多个最大者，那就拼时间，最先抢到最大红包的用户手气最佳。</p>

<h5>注：与红包相关的数据量不少，DB存储和Cache都做了Sharding，同时，红包是跟钱相关的，那么存储层的高可靠和高可用性是必须要考虑的一个问题，而且是一个比较大的话题，这里就不做介绍了，有兴趣的同学可以自己思考一下。</h5>
]]></content>
  </entry>
  
</feed>
