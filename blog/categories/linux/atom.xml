<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[博客分类: Linux | 精神兵的 Blog]]></title>
  <link href="http://jackliu8722.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jackliu8722.github.com/"/>
  <updated>2016-06-07T10:32:16+08:00</updated>
  <id>http://jackliu8722.github.com/</id>
  <author>
    <name><![CDATA[jackliu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux源码分析之进程表示]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/11/07/linux-kernel-001/"/>
    <updated>2013-11-07T08:43:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/11/07/linux-kernel-001</id>
    <content type="html"><![CDATA[<p>linux进程的概念在这里就不介绍，网上可以找到非常多的资料进行学习，这里主要介绍在linux系统中，进程是如何表示的，作为学习后个笔记。</p>

<p>Linux内核涉及进程和程序的所有算法都围绕一个名为task_struct的数据结构建立，该结构定义在内核源码的include/sched.h文件中。task_struct是一个结构体，包含非常多的成员，其完整结构体如下：
 {%codeblock lang:c%}</p>

<pre><code>struct task_struct {
    volatile long state;    /* 进程状态：-1 表示不可运行, 0 表示可运行, &gt;0 表示停止 */
    void *stack;  /* 进程内核栈*/
    atomic_t usage;
    /* 
      每个进程当前的状态标志：
      0x00000002 表示进程正在在被创建
      0x00000004 表示进程正准备退出
      0x00000040 表示此进程被fork系统调用创建，但并没有执行exec
      0x00000400 表示此进程由于其它进行发送相关信号矶被杀死 
     */
    unsigned int flags; 
    unsigned int ptrace;

    int lock_depth;     /* 大内核锁深度 */

    #ifdef CONFIG_SMP
    #ifdef __ARCH_WANT_UNLOCKED_CTXSW
    int oncpu;  /* 指示进程运行的CPU */
    #endif
    #endif
    /* 
     * static_prio是表态优先级，也就是进程启动时分配的优先级
     * prio,normal_prio是动态优先级 
     */
    int prio, static_prio, normal_prio; 
    /* run_list是一个表头，用于维护包含各进程的一个运行表*/
    struct list_head run_list;
    const struct sched_class *sched_class; /*表示该进程所属的调用器类*/
    struct sched_entity se; /* 调度实体*/

    #ifdef CONFIG_PREEMPT_NOTIFIERS
    /* 结构体preempt_notifier链表，与抢占有关*/
    struct hlist_head preempt_notifiers;
    #endif

    unsigned short ioprio;
    /*
    fpu_counter 包含了浮点运算单元用到的上下文切换
    */
    unsigned char fpu_counter;
    s8 oomkilladj; /* OOM kill score adjustment (bit shift). */
    #ifdef CONFIG_BLK_DEV_IO_TRACE
    unsigned int btrace_seq;
    #endif

    /*
     * policy保存了对该进程应用的调度策略，有5个可能的值
     * SCHED_NORMAL 用于普通进程，通过完全公平调度器来处理。
     * SCHED_BATCH和SCHED_IDLE 也通过完全公平调度器来处理，不过用于次要的进程。
     * SCHED_BATCH用于交互，CPU使用密集的批处理进程。
     * SCHED_RR和SCHED_FIFO用于实现软实时进程，SCHED_RR实现了一种循环方法，而SCHED_FIFO则使用先进先出机制。
     */
    unsigned int policy;  /* 高度策略 */
    /*cpus_allowed是一个位域，在多处理品系统上使用，用来限制进程可以在哪些CPU上运行*/
    cpumask_t cpus_allowed; /* 多核体系结构中管理CPU的位图*/
    unsigned int time_slice; /*指定进程可使用CPU的剩余时间段*/

    #if defined(CONFIG_SCHEDSTATS) || defined(CONFIG_TASK_DELAY_ACCT)
    struct sched_info sched_info;
    #endif

    struct list_head tasks;
    /*
    * ptrace_list/ptrace_children forms the list of my children
    * that were stolen by a ptracer.
    */
    struct list_head ptrace_children;
    struct list_head ptrace_list;

    struct mm_struct *mm, *active_mm;

    /* task state */
    struct linux_binfmt *binfmt;
    int exit_state;
    int exit_code, exit_signal;
    int pdeath_signal;  /*  The signal sent when the parent dies  */
    /* ??? */
    unsigned int personality;
    unsigned did_exec:1;
    pid_t pid; /* 全局进程ID*/
    pid_t tgid; /* 局部进程ID*/

    #ifdef CONFIG_CC_STACKPROTECTOR
    /* Canary value for the -fstack-protector gcc feature */
    unsigned long stack_canary;
    #endif
    /* 
    * pointers to (original) parent process, youngest child, younger sibling,
    * older sibling, respectively.  (p-&gt;father can be replaced with 
    * p-&gt;parent-&gt;pid)
    */
    struct task_struct *real_parent; /* real parent process (when being debugged) */
    struct task_struct *parent; /* parent process */
    /*
    * children/sibling forms the list of my children plus the
    * tasks I'm ptracing.
    */
    struct list_head children;  /* list of my children */
    struct list_head sibling;   /* linkage in my parent's children list */
    struct task_struct *group_leader;   /* threadgroup leader */

    /* PID/PID hash table linkage. */
    struct pid_link pids[PIDTYPE_MAX];
    struct list_head thread_group;

    struct completion *vfork_done;      /* for vfork() */
    int __user *set_child_tid;      /* CLONE_CHILD_SETTID */
    int __user *clear_child_tid;        /* CLONE_CHILD_CLEARTID */

    /*
     *表示实时进程的优先级，最低的实时优先级为0，最高的优先级是99。值越大，表明优先级越高，不同于nice值
     */
    unsigned int rt_priority;
    cputime_t utime, stime, utimescaled, stimescaled;
    cputime_t gtime;
    cputime_t prev_utime, prev_stime;
    unsigned long nvcsw, nivcsw; /* context switch counts */
    struct timespec start_time;         /* monotonic time */
    struct timespec real_start_time;    /* boot based time */
    /* mm fault and swap info: this can arguably be seen as either mm-specific or thread-specific */
    unsigned long min_flt, maj_flt;

    cputime_t it_prof_expires, it_virt_expires;
    unsigned long long it_sched_expires;
    struct list_head cpu_timers[3];

    /* process credentials */
    uid_t uid,euid,suid,fsuid;
    gid_t gid,egid,sgid,fsgid;
    struct group_info *group_info;
    kernel_cap_t   cap_effective, cap_inheritable, cap_permitted;
    unsigned keep_capabilities:1;
    struct user_struct *user;
    #ifdef CONFIG_KEYS
    struct key *request_key_auth;   /* assumed request_key authority */
    struct key *thread_keyring; /* keyring private to this thread */
    unsigned char jit_keyring;  /* default keyring to attach requested keys to */
    #endif
    char comm[TASK_COMM_LEN]; /* executable name excluding path
                 - access with [gs]et_task_comm (which lock
                   it with task_lock())
                 - initialized normally by flush_old_exec */
    /* file system info */
    int link_count, total_link_count;
    #ifdef CONFIG_SYSVIPC
    /* ipc stuff */
    struct sysv_sem sysvsem;
    #endif
    /* CPU-specific state of this task */
    struct thread_struct thread;
    /* filesystem information */
    struct fs_struct *fs;
    /* open file information */
    struct files_struct *files;
    /* namespaces */
    struct nsproxy *nsproxy;
    /* signal handlers */
    struct signal_struct *signal;
    struct sighand_struct *sighand;

    sigset_t blocked, real_blocked;
    sigset_t saved_sigmask;     /* To be restored with TIF_RESTORE_SIGMASK */
    struct sigpending pending;

    unsigned long sas_ss_sp;
    size_t sas_ss_size;
    int (*notifier)(void *priv);
    void *notifier_data;
    sigset_t *notifier_mask;
    #ifdef CONFIG_SECURITY
    void *security;
    #endif
    struct audit_context *audit_context;
    seccomp_t seccomp;

    /* Thread group tracking */
    u32 parent_exec_id;
    u32 self_exec_id;
    /* Protection of (de-)allocation: mm, files, fs, tty, keyrings */
    spinlock_t alloc_lock;

    /* Protection of the PI data structures: */
    spinlock_t pi_lock;

    #ifdef CONFIG_RT_MUTEXES
    /* PI waiters blocked on a rt_mutex held by this task */
    struct plist_head pi_waiters;
    /* Deadlock detection and priority inheritance handling */
    struct rt_mutex_waiter *pi_blocked_on;
    #endif

    #ifdef CONFIG_DEBUG_MUTEXES
    /* mutex deadlock detection */
    struct mutex_waiter *blocked_on;
    #endif
    #ifdef CONFIG_TRACE_IRQFLAGS
    unsigned int irq_events;
    int hardirqs_enabled;
    unsigned long hardirq_enable_ip;
    unsigned int hardirq_enable_event;
    unsigned long hardirq_disable_ip;
    unsigned int hardirq_disable_event;
    int softirqs_enabled;
    unsigned long softirq_disable_ip;
    unsigned int softirq_disable_event;
    unsigned long softirq_enable_ip;
    unsigned int softirq_enable_event;
    int hardirq_context;
    int softirq_context;
    #endif
    #ifdef CONFIG_LOCKDEP
    # define MAX_LOCK_DEPTH 30UL
    u64 curr_chain_key;
    int lockdep_depth;
    struct held_lock held_locks[MAX_LOCK_DEPTH];
    unsigned int lockdep_recursion;
    #endif

    /* journalling filesystem info */
    void *journal_info;

    /* stacked block device info */
    struct bio *bio_list, **bio_tail;

    /* VM state */
    struct reclaim_state *reclaim_state;

    struct backing_dev_info *backing_dev_info;

    struct io_context *io_context;

    unsigned long ptrace_message;
    siginfo_t *last_siginfo; /* For ptrace use.  */
    #ifdef CONFIG_TASK_XACCT
    /* i/o counters(bytes read/written, #syscalls */
    u64 rchar, wchar, syscr, syscw;
    #endif
    struct task_io_accounting ioac;
    #if defined(CONFIG_TASK_XACCT)
    u64 acct_rss_mem1;  /* accumulated rss usage */
    u64 acct_vm_mem1;   /* accumulated virtual memory usage */
    cputime_t acct_stimexpd;/* stime since last update */
    #endif
    #ifdef CONFIG_NUMA
    struct mempolicy *mempolicy;
    short il_next;
    #endif
    #ifdef CONFIG_CPUSETS
    nodemask_t mems_allowed;
    int cpuset_mems_generation;
    int cpuset_mem_spread_rotor;
    #endif
    #ifdef CONFIG_CGROUPS
    /* Control Group info protected by css_set_lock */
    struct css_set *cgroups;
    /* cg_list protected by css_set_lock and tsk-&gt;alloc_lock */
    struct list_head cg_list;
    #endif
    #ifdef CONFIG_FUTEX
    struct robust_list_head __user *robust_list;
    #ifdef CONFIG_COMPAT
    struct compat_robust_list_head __user *compat_robust_list;
    #endif
    struct list_head pi_state_list;
    struct futex_pi_state *pi_state_cache;
    #endif
    atomic_t fs_excl;   /* holding fs exclusive resources */
    struct rcu_head rcu;

    /*
    * cache last used pipe for splice
    */
    struct pipe_inode_info *splice_pipe;
    #ifdef  CONFIG_TASK_DELAY_ACCT
    struct task_delay_info *delays;
    #endif
    #ifdef CONFIG_FAULT_INJECTION
    int make_it_fail;
    #endif
    struct prop_local_single dirties;
};
</code></pre>

<p>{%endcodeblock%}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令集锦]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/09/18/linuxchang-yong-ming-ling-ji-jin/"/>
    <updated>2013-09-18T22:54:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/09/18/linuxchang-yong-ming-ling-ji-jin</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>本文主要把工作中和学习中遇到的一些常用的linux命令进行了整理，方便今后查阅，以节省时间，时间就是Money啊，哈哈……</p>

<h2>1. tail</h2>

<h3>作用</h3>

<p>该命令从指定的行开始将文件写到标准输出。使用tail命令的<strong>-f</strong>选项可以方便的查阅正在改变的日志文件，tail -f filename会把filename里最尾部的内容显示在屏幕上，并且不但刷新，使你看到最新的文件内容。</p>

<h3>语法</h3>

<p>tail [  -f ] [  -c Number |  -n Number |  -m Number |  -b Number |  -k Number ] [ File ]</p>
]]></content>
  </entry>
  
</feed>
